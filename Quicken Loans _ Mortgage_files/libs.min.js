/*global jQuery */

//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&o>i;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=b(e,i,4);var o=!k(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=x(r,e);for(var u=O(t),i=n>0?0:u-1;i>=0&&u>i;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t,r){return function(e,u,i){var o=0,a=O(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return i=r(e,u),e[i]===u?i:-1;if(u!==u)return i=t(l.call(e,o,a),m.isNaN),i>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&a>i;i+=n)if(e[i]===u)return i;return-1}}function e(n,t){var r=I.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||a,i="constructor";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=I[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var u=this,i=u._,o=Array.prototype,a=Object.prototype,c=Function.prototype,f=o.push,l=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,g=c.bind,y=Object.create,d=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):u._=m,m.VERSION="1.8.3";var b=function(n,t,r){if(t===void 0)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},x=function(n,t,r){return null==n?m.identity:m.isFunction(n)?b(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return x(n,t,1/0)};var _=function(n,t){return function(r){var e=arguments.length;if(2>e||null==r)return r;for(var u=1;e>u;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;a>c;c++){var f=o[c];t&&r[f]!==void 0||(r[f]=i[f])}return r}},j=function(n){if(!m.isObject(n))return{};if(y)return y(n);d.prototype=n;var t=new d;return d.prototype=null,t},w=function(n){return function(t){return null==t?void 0:t[n]}},A=Math.pow(2,53)-1,O=w("length"),k=function(n){var t=O(n);return"number"==typeof t&&t>=0&&A>=t};m.each=m.forEach=function(n,t,r){t=b(t,r);var e,u;if(k(n))for(e=0,u=n.length;u>e;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;u>e;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;u>o;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;return e=k(n)?m.findIndex(n,t,r):m.findKey(n,t,r),e!==void 0&&e!==-1?n[e]:void 0},m.filter=m.select=function(n,t,r){var e=[];return t=x(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(x(t)),r)},m.every=m.all=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r,e){return k(n)||(n=m.values(n)),("number"!=typeof r||e)&&(r=0),m.indexOf(n,t,r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-1/0,o=-1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],e>i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],i>e&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(o>u||1/0===u&&1/0===i)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=k(n)?n:m.values(n),e=r.length,u=Array(e),i=0;e>i;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(k(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=x(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=x(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=F(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=F(function(n,t,r){n[r]=t}),m.countBy=F(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):k(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:k(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=x(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var S=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=O(n);a>o;o++){var c=n[o];if(k(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=S(c,t,r));var f=0,l=c.length;for(u.length+=l;l>f;)u[i++]=c[f++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return S(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=x(r,e));for(var u=[],i=[],o=0,a=O(n);a>o;o++){var c=n[o],f=r?r(c,o,n):c;t?(o&&i===f||u.push(c),i=f):r?m.contains(i,f)||(i.push(f),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(S(arguments,!0,!0))},m.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=O(n);u>e;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;r>o&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=S(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,O).length||0,r=Array(t),e=0;t>e;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=O(n);u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=x(r,e,1);for(var u=r(t),i=0,o=O(n);o>i;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.indexOf=r(1,m.findIndex,m.sortedIndex),m.lastIndexOf=r(-1,m.findLastIndex),m.range=function(n,t,r){null==t&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;e>i;i++,n+=r)u[i]=n;return u};var E=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=j(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(g&&n.bind===g)return g.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError("Bind must be called on a function");var r=l.call(arguments,2),e=function(){return E(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;u>o;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return E(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(1>=e)throw new Error("bindAll must be passed function names");for(t=1;e>t;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=m.now();a||r.leading!==!1||(a=f);var l=t-(f-a);return e=this,u=arguments,0>=l||l>t?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,l)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var f=m.now()-o;t>f&&f>=0?e=setTimeout(c,t-f):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var f=r&&!e;return e||(e=setTimeout(c,t)),f&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}},m.once=m.partial(m.before,2);var M=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(n){if(!m.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)m.has(n,r)&&t.push(r);return M&&e(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var r in n)t.push(r);return M&&e(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;i>a;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=_(m.allKeys),m.extendOwn=m.assign=_(m.keys),m.findKey=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=0,o=u.length;o>i;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=b(t,r)):(u=S(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;c>a;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(S(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=_(m.allKeys,!0),m.create=function(n,t){var r=j(n);return t&&m.extendOwn(r,t),r},m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;e>i;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case"[object Date]":case"[object Boolean]":return+n===+t}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!N(n[c],t[c],r,e))return!1}else{var f,l=m.keys(n);if(c=l.length,m.keys(t).length!==c)return!1;for(;c--;)if(f=l[c],!m.has(t,f)||!N(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return N(n,t)},m.isEmpty=function(n){return null==n?!0:k(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=h||function(n){return"[object Array]"===s.call(n)},m.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){m["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(n){return"function"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"===s.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return n===void 0},m.has=function(n,t){return null!=n&&p.call(n,t)},m.noConflict=function(){return u._=i,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=w,m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;n>u;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=m.invert(B),R=function(n){var t=function(t){return n[t]},r="(?:"+m.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};m.escape=R(B),m.unescape=R(T),m.result=function(n,t,r){var e=null==n?void 0:n[t];return e===void 0&&(e=r),m.isFunction(e)?e.call(n):e};var q=0;m.uniqueId=function(n){var t=++q+"";return n?n+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+t.length,r?i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(t.variable||"obj","_",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},f=t.variable||"obj";return c.source="function("+f+"){\n"+i+"}",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var P=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return f.apply(n,arguments),P(this,r.apply(m,n))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],P(this,r)}}),m.each(["concat","join","slice"],function(n){var t=o[n];m.prototype[n]=function(){return P(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this);
//# sourceMappingURL=underscore-min.map
(function ($) {
    var initialized = false,
        $components = {},
        current     = null;

    $components = {
        modalWindow:  null,
        modalTitle:   null,
        modalClose:   null,
        modalContent: null,
        modalShadow:  null,
        modalWrapper: null
    };

    $.modal = {
        initialize: function () {
            if (initialized) {
                return;
            }

            $components.modalWindow  = $('<div class="modal__window"></div>');
            $components.modalTitle   = $('<div class="modal__title"></div>');
            $components.modalClose   = $('<div class="modal__close"></div>');
            $components.modalContent = $('<div class="modal__content"></div>');
            $components.modalShadow  = $('<div class="modal__shadow"></div>');
            $components.modalWrapper = $('<div class="modal"></div>');

            $components.modalClose.appendTo($components.modalWindow);
            $components.modalTitle.appendTo($components.modalWindow);
            $components.modalContent.appendTo($components.modalWindow);
            $components.modalWindow.appendTo($components.modalWrapper);
            $components.modalWrapper.appendTo($('body'));
            $components.modalShadow.appendTo($('body'));

            $components.modalClose.on('click', function () {
                $.modal.close();
            })
        },
        open: function (modal) {
            if (current !== null || modal.options.onBeforeOpen($components) === false) {
                return;
            }

            $.modal.initialize();

            current = modal;

            $.modal.setStyle(modal.options.styles, false);
            $.modal.setContent();
            $.modal.toggle(true);

            modal.options.onAfterOpen($components);
        },
        close: function () {
            if (current.options.onBeforeClose($components) === false) {
                return;
            }

            $.modal.toggle(false);

            current.options.onAfterClose($components);

            current = null;
        },
        setStyle: function (styles, animate) {
            var dimensions = $.modal.getDimensions(styles);

            if (current.options.responsive === true) {
                if (styles.hasOwnProperty('height')) {
                    styles.minHeight = styles.height;
                    styles.height    = '';
                }
            }

            styles.top = ((($(window).height() - dimensions.height) / 2) + $(document).scrollTop()) + 'px';

            if ($components.modalWindow.is(':visible') && animate) {
                $components.modalWindow.animate(styles);
            } else {
                $components.modalWindow.css(styles);
            }
        },
        getDimensions: function (styles) {
            var $tester    = $('<div style="display: none; position: absolute;"></div>').css(styles),
                dimensions = {};

            $tester.appendTo($('body'));

            dimensions = {
                width:  $tester.outerWidth(),
                height: $tester.outerHeight()
            };

            $tester.remove();

            return dimensions;
        },
        setContent: function () {
            if (current.options.title) {
                $components.modalTitle.show().text(current.options.title);
            } else {
                $components.modalTitle.hide();
            }

            $components.modalClose.toggle(current.options.closeBtn === true);

            if (current.options.display) {
                current.content.show();
            }

            $components.modalContent.html(current.content);
        },
        toggle: function (show) {
            if (current.options.overlay === true) {
                $components.modalShadow.toggle(show);
            }

            $components.modalWrapper.toggle(show);

            if (!show) {
                $components.modalContent.html('');
            }
        }
    };

    $.fn.modal = function () {
        var modal = {};

        modal.options = {
            // Look and feel
            title:      '',
            closeBtn:   true,
            overlay:    true,
            responsive: true,
            display:    true,
            clone:      true,
            styles:     {
                width:  '400px',
                height: '400px'
            },

            // Event Callbacks
            onBeforeOpen:  function () { },
            onAfterOpen:   function () { },
            onBeforeClose: function () { },
            onAfterClose:  function () { }
        };

        if (arguments.length) {
            modal.options = $.extend(true, {}, modal.options, arguments[0]);
        }

        modal.content = modal.options.clone ? $(this).clone() : $(this);

        $.modal.open(modal);

        return modal;
    }
})(jQuery);

// ARM Modal
(function($){
    $.armModal = function(element, options) {

        var plugin = this;
        plugin.config = {}
        var $element = $(element),
             element = element;

        var defaults = {
            dialog:         '.armModal-' + $element.attr('id').replace(/^.*\-/g, ''),
            loadingBar:     '<div class="loadingBar"></div>',
            subheadline:    'ARM Future Adjustments'
        }

        plugin.config = $.extend({}, defaults, options);

        plugin.init = function() {
            $element.bind('click', function(e) {
                e.preventDefault();
                $(plugin.config.dialog).addClass('javascriptOn');
                $(plugin.config.dialog).modal({
                    styles: {
                        width:  '460px',
                        height: '550px'
                    },
                    onAfterOpen: function ($comps) {
                        $comps.modalContent.find('.armModal').show();
                    }
                });
            })
        }
        plugin.init();
    }
    
    $.fn.armModal = function(options) {
        return this.each(function() {
            if (undefined == $(this).data('armModal')) {
                var plugin = new $.armModal(this, options);
                $(this).data('armModal', plugin);
            }
        });
    }    
    
})(jQuery);
// Will add slide toggle animation to any element with the CSS class
// accordion-toggle. Even if its added to the DOM after loading has completed.

jQuery(document).on('click', '.accordion-toggle, .js-Accordion-trigger', function ($) {
    var $this = jQuery(this);
    $this.next('.accordion-content, .js-Accordion-content').slideToggle();
    $this.children(':first-child').toggleClass('arrow-down o-Icon--rotate');
});

(function ($) {

    $.fn.newModal = function (eventName, element, config) {
        // settings
        var settings = $.extend({
            cancelText: 'Cancel',
            cancelTag: ' ',
            confirmText: 'Confirm',
            cancelFunction: function () {
                $('.c-ModalMask').remove();
                $('.c-Modal').remove();
            },
            confirmFunction: function () {
                window.location.pathname = settings.confirmURL;
            },
            confirmURL: '/',
            content: 'This is default modal content',
            modalTitle: 'Are you sure?',
            cancelEvent: 'ModalCancelEvent',
            confirmEvent: 'ModalConfirmEvent',
            confirmSwitch: true
        }, config);

        //create the modal's pieces, define vars
        var modalMask     = $('<div class="c-ModalMask"></div>'),
            modalBox      = $('<div class="c-Modal" data-qa="modal"></div>'),
            cancelLink  = $('<a class="o-Link--alt" href="" data-qa="modal-close"'+ settings.cancelTag +'></a>')
                .text(settings.cancelText),
            confirmButton = $('<button class="sls-c-Button c-Button c-Modal__confirm sls-u-mrm"></button>')
                .text(settings.confirmText),
            modalFooter   = $('<footer class="c-Modal__footer"></footer>'),
            modalTitle    = $('<header class="c-Modal__header"><h2 class="c-Modal__heading b-Heading--sub">'+ settings.modalTitle +'</h2>'
            + '<a class="c-Modal__close o-Link--alt" href="" data-qa="modal-close"'+ settings.cancelTag +'>'
            + '<svg class="c-Modal__closeIcon c-Icon--muted" width="30" height="30" viewBox="0 0 32 32"><use xlink:href="#cross" /></svg>'
            + '</a></header>'),
            modalText = $('<div class="c-Modal__body">' + settings.content + '</div>'),
            $body = $('body'),
            lastFocus;

        // put the modal together
        modalBox
            .append(modalTitle)
            .append(modalText);
        if (settings.confirmSwitch) {
            modalFooter
                .append(confirmButton);
        }
        modalFooter
            .append(cancelLink);
        modalBox
            .append(modalFooter);

        // when the event its listening for fires
        element.on(eventName, function () {

            var modalExit = function (e) {
              e.preventDefault();
              settings.cancelFunction();
              element.trigger(settings.cancelEvent);
              $body.css('overflow', 'auto');
              returnFocus();
            }

            //if its not already there
            if (element.find('.c-Modal').size() === 0) {

                $body.css('overflow', 'hidden');

                //save the last thing that was focused
                lastFocus = element.find(':focus');

                //attach it
                element
                    .before(modalBox)
                    .before(modalMask);

                //focus on the confirm button
                modalFocus();

                //need to restrict focus/blur to the modal window (using DOM API)
                element.get(0).onfocusin = modalFocus(); // for IE (no event capturing support)
                element.get(0).onfocusout = modalFocus(); // for IE (no event capturing support)
                element.get(0).addEventListener("focus", modalFocus, true);
                element.get(0).addEventListener('blur', modalFocus, true);

                cancelLink.on('click', function (e) {
                    modalExit(e);
                });

                $('.c-Modal__close').on('click', function (e) {
                    modalExit(e);
                });

                confirmButton.on('click', function () {
                    settings.confirmFunction();
                    element.trigger(settings.confirmEvent);
                });

                // if somebody clicks outside the modal assume they want to cancel
                modalMask.on('click', function (e) {
                    modalExit(e);
                });

                // if somebody presses ESC
                $('body').keyup(function (e) {
                    if (e.code === 'Escape' || e.keyCode === 27) {
                        modalExit(e);
                    }
                });
            }
        });

        function modalFocus() {
            confirmButton.focus();
            modalTitle.focus();
        }

        function returnFocus() {
            lastFocus.focus();
        }
    };
}( jQuery ));

var $primaryNav = $('[data-primary-nav]'),
      $subNav = $('[data-sub-nav]'),
      $hamburgerIcon = $('.c-HamburgerIcon');

// click on the hamburger icon and it will drop the navigation on mobile
$('[data-primary-nav-trigger]').on( 'click', function() {
    $primaryNav.toggleClass('show u-Show');
    $('.c-Masthead').toggleClass('c-Masthead--mobile');
});

// transform the icon to an 'X'
$hamburgerIcon.click(function() {
    $(this).toggleClass('transform');
});

// for sub nav on mobile
// click on trigger and it opens the sub nav
var $navItems = $('[data-nav-item]');

if ($navItems) {
  var $subNavTriggers = $('[data-sub-nav-trigger]');

  $subNavTriggers.on({
    click: function click(event) {
      event.preventDefault();
      var $thisNavTrigger = $(this);
      $thisNavTrigger
        .toggleClass('c-NarrowNavigation__title--active')
        .next('[data-sub-nav]').slideToggle();
    }
  });
}

$(function() {
  var $navItem = $('.c-WideNavigation__item');

  // prevents click on navigation title link
  $('.c-WideNavigation__title').on('click', function(e) {
      e.preventDefault();
  });

  // allows access to sub nav with keyboard only
  $('.js-NavigationDesktop').on('focus', '.c-WideNavigation__item > a', function (e) {
      $(this)
          .parent($navItem)
          .addClass('is-open')
          .siblings($navItem)
          .removeClass('is-open');

      $('body').on('click', function () {
          $($navItem).removeClass('is-open');
      });
  });

  // Close sub navigation with escape key
  $('body').on('keyup', function(e) {
    if (e.keyCode === 27) {
      // close sub navigation
      $navItem.removeClass('is-open');
    }
  });

  // Close navigation when clicking outside the nav
  $('body').on('mouseup', function(e) {
    if ($(e.target).closest('.c-WideNavigation__title').length === 0) {
      // close sub navigation
      $navItem.removeClass('is-open');
    }
  });
});

/**
* Show/Hid functionality for lead forms
*
* The Referral function handles the showing/hiding of Loan Purpose groups and scroll errors into view.
*
* Requirements:
*   jquery 1.8.2+
*/
(function (window, $, undefined)
{
    // BEGIN PUBLIC PLUGIN METHODS
    var formConstants = {
            "loanPurposes": {
                purchase: [
                    "Signed a Purchase Agreement",
                    "Buying in 2 to 3 Months",
                    "Purchasing within 45 days",
                    "Actively looking 45+ days",
                    "Offer Pending / Found a House",
                    "Researching Options"
                ],
                refinance: [
                    "refinance",
                    "debtconsolidation",
                    "cashoutrefinance"
                ]
            },
            "showAgentOptionValues": [
                "Buying in 2 to 3 Months",
                "Purchasing within 45 days",
                "Actively looking 45+ days",
                "Researching Options"
            ],
            "showOver62OptionValues": [
                "refinance",
                "debtconsolidation",
                "cashoutrefinance",
                "refinance_over_62"
            ]
        },
        methods = {
            /**
             * Displays the appropriate group based on the selected loan purpose value.
             *
             * @method loanPurposeToggler
             * @static
             */
            loanPurposeToggler: function ()
            {
                var group,
                    formData = this.data( "leadForm" );

                // Ger user set / override the session set.
                group = methods.getLoanPurposeGroup.call( this );

                if ( group !== formData.currentLoanPurposeGroup ) {
                    // Update the current puchase group.
                    formData.currentLoanPurposeGroup = group;
                    // Hide all value groups
                    this.find( ".form-wrapper .block" ).hide();
                    // Display the selected group.
                    $( '#' + group + "Block" ).show();
                }

                return true;
            },
            /**
             * Gets the loan purpose group.
             *
             * @method getLoanPurposeGroup
             * @static
             * @return boolean
             */
            getLoanPurposeGroup: function ()
            {
                var groupValues, loanPurposes,
                    formData = this.data( "leadForm" ),
                    loanPurposes = formConstants.loanPurposes,
                    group = formData.defaultGroup,
                    loanPurposeVal = formData.$loanPurpose.val();

                if ( typeof loanPurposeVal === "string" && loanPurposeVal.length > 0 ) {
                    // Look up the loan purpose group based on the loan purpose value
                    for ( group in loanPurposes ) {
                        if ( !loanPurposes.hasOwnProperty(group) ) continue;
                        groupValues = loanPurposes[ group ];
                        if ( $.inArray(loanPurposeVal, groupValues) > -1 ) {
                            break;
                        }
                    }
                }
                return group;
            },
            /**
             * Scroll the form into view if there are any errors.
             *
             * @method scrollErrorsIntoView
             * @return object this
             */
            scrollErrorsIntoView: function ()
            {
                var leadFormData = this.data("leadForm"),
                    errorSelector,
                    $errors,
                    formParentPos;

                if ( !leadFormData ) {
                    return this;
                }

                errorSelector = leadFormData.errorSelector;

                if ( !errorSelector ) {
                    return this;
                }

                $errors = this.find ( errorSelector );

                if ( $errors.length > 0 ) {
                    formParentPos = this.offset();
                    scrollTo( formParentPos.left, formParentPos.top );
                }

                return this;
            },
            /**
             * Show the leasing fields, based on PurchaseGoal, or clear them out.
             */
            "currentlyRentingToggler": function()
            {
                var purchaseGoalVal = this.find( "#referral_PurchaseGoal" ).val();
                if ( purchaseGoalVal == "First Time Homebuyer" ) {
                    this.find( "#leasingBlock" ).show();
                } else {
                    this.find( "#leasingBlock" ).hide();
                    this.find( "#currentlyLeasingBlock" ).hide();
                    this.find( "select#referral_Leasing, select#referral_LeasingMonth, select#referral_LeasingYear" )
                        .each( methods.resetSelect );
                }
                return true;
            },
            /**
            * Reset select
            */
            "resetSelect": function ()
            {
                this.selectedIndex = 0;
                return this;
            },
            /**
             * Toggle the VA Loan Checkbox on and off based on loan purpose and LTV
             */
            "leaseExpirationToggler": function ()
            {
                var leasingVal = this.find( "#referral_Leasing" ).val();
                if ( leasingVal == "true" ) {
                    this.find( "#currentlyLeasingBlock" ).show();
                } else {
                    this.find( "#currentlyLeasingBlock" ).hide();
                    this.find( "select#referral_LeasingMonth, select#referral_LeasingYear" )
                        .each( methods.resetSelect );
                }
                return true;
            },
            /**
             * Show/hide the VA Loan Checkbox based on loan purpose and LTV.
             */
            "realEstateAgentToggler": function()
            {
                var form = this.data( "leadForm" ),
                    loanPurposeVal = form.$loanPurpose.val(),
                    purchaseValues = formConstants.showAgentOptionValues;
                if ( $.inArray(loanPurposeVal, purchaseValues) > -1 ) {
                    form.$agentBlock.show();
                } else {
                    form.$agentBlock.hide();
                    form.$agentSelect[0].selectedIndex = 0;
                }
                return true;
            },
            /**
             * Show/hide over62 checkbox based on some other fields
             *
             * NOTE: All this logic is duplicated in LeadFormWorkflow::eventPostSucceeded
             *       and LeadFormWorkflow::buildOver62Checkbox
             *
             * @uses jquery
             */
            "over62Toggler": function ()
            {
                var showViaLTV, loanPurpose = this.find( "#referral_LoanPurpose" ).val(),
                    loanAmount = this.find( "#referral_LoanAmount" ).val(),
                    homeValue = this.find( "#referral_HomeValue" ).val(),
                    refinanceValues = formConstants.showOver62OptionValues,
                    maxLTV =   this.data("leadForm").maxLTV,
                    showViaLoanPurpose = ( $.inArray(loanPurpose, refinanceValues) > -1 );

                if ( !isNaN(loanAmount) && !isNaN(homeValue) && !isNaN(maxLTV) ) {
                    showViaLTV = ( loanAmount / homeValue < maxLTV );
                }
                if ( showViaLoanPurpose && showViaLTV ) {
                    this.find( "#Over62CheckboxContainer" ).show();
                } else {
                    this.find( "#Over62CheckboxContainer" ).hide();
                    // Clear a checkbox or a select
                    this.find( "input#referral_Over62" ).attr( "checked", false );
                    this.find( "select#referral_Over62" ).val( '' );
                }
                return this;
            },
            /**
             * Toggle the Your Name field on and off based on ForYouOrSomeoneElse (Banker Referral form only)
             */
            forYouOrSomeoneElseToggler: function()
            {
                var subString = "Referral's ",
                    regExString = /^(Referral\'s)\s/;

                if ( this.find("#referral_ForYouOrSomeoneElse").val() == "Someone Else" ) {
                    this.find( "#referral_ReferrerName_list").show();
                    this.find( "#referral_FirstName_label label" ).html( subString + this.find("#referral_FirstName_label label").html() );
                    this.find( "#referral_LastName_label label" ).html( subString + this.find("#referral_LastName_label label").html() );
                    this.find( "#referral_HomePhone_label label" ).html( subString + this.find("#referral_HomePhone_label label").html() );
                    this.find( "#referral_Email_label label" ).html( subString + this.find("#referral_Email_label label").html() );
                    this.find( "#referral_State_label label" ).html( subString + this.find("#referral_State_label label").html() );
                    this.find( "#referral_LoanPurpose_label label" ).html( subString + this.find("#referral_LoanPurpose_label label").html() );
                } else {
                    this.find( "#referral_ReferrerName_list" ).hide();
                    if (this.find( "#referral_FirstName_label label" ).length > 0) {
                        this.find( "#referral_FirstName_label label" ).html( this.find("#referral_FirstName_label label").html().replace(regExString, '') );
                        this.find( "#referral_LastName_label label" ).html( this.find("#referral_LastName_label label").html().replace(regExString, '') );
                        this.find( "#referral_HomePhone_label label" ).html( this.find("#referral_HomePhone_label label").html().replace(regExString, '') );
                        this.find( "#referral_Email_label label" ).html( this.find("#referral_Email_label label").html().replace(regExString, '') );
                        this.find( "#referral_State_label label" ).html( this.find("#referral_State_label label").html().replace(regExString, '') );
                        this.find( "#referral_LoanPurpose_label label" ).html( this.find("#referral_LoanPurpose_label label").html().replace(regExString, '') );
                    }
                }
                return this;
            },
            /**
             * changes the madlibs form headline to match loan purpose
             * event method
             */
            "changeHeadline": function()
            {
                var loanPurposeValue = $( "#referral_LoanPurpose :selected" ).text();
                $( ".arrangement_madlibs #headline_referral_form" ).html( "RE: " + loanPurposeValue );
                return true;
            },
            /**
             * Displays the default value group and creates the calculator chooser.
             * @return object
             */
            "init": function( pOptions )
            {
                var defaultSettings, loanPurposes;

                defaultSettings = {
                    defaultGroup: "refinance",
                    parentSelector: "#referralForm",
                    maxLTV: 0.66,
                    errorSelector: '.error'
                };

                return this.each(function ()
                {
                    var $this = $( this ),
                        formData = $this.data( "leadForm" ),
                        $loanPurpose = $this.find( "#referral_LoanPurpose" ),
                        pageDefaultLoanPurpose = $this.parent().data( "purpose" ),
                        isValid, loanPurposeGroup;

                    if ( !formData ) {
                        formData = $.extend({
                            "$loanPurpose": $loanPurpose,
                            "currentLoanPurposeGroup": null
                        }, defaultSettings, pOptions );

                        $this.data( "leadForm", formData );
                    }
                    // Adds an input field to the form which we will rely on to determine if the user has JS enabled.
                    formData.$noJs = $( "<div class=\"hide\"><input name=\"hasJavascript\" type=\"hidden\" value=\"1\" /></div>" );
                    formData.$agentBlock = $this.find( "#currentRABlock" );
                    formData.$agentSelect = $this.find( "select#referral_RealEstateAgent" );
                    $this.append( formData.$noJs );

                    // changes the madlibs form headline to match loan purpose
                    methods.changeHeadline();
                    // Add a bunch of togglers for various fields.
                    methods.currentlyRentingToggler.apply( $this );
                    methods.leaseExpirationToggler.apply( $this );
                    methods.over62Toggler.apply( $this );

                    if ( $loanPurpose.length > 0 ) {
                        // Add methods to the elements events, but when the event is triggered, the context be this plugin.
                        $loanPurpose.bind( "change.leadForm", $.proxy(methods.loanPurposeToggler, $this) );
                    }
                    // Wire up real-estate agent bits.
                    if ( formData.$agentBlock.length > 0 ) {
                        methods.realEstateAgentToggler.apply( $this );
                        formData.$loanPurpose.bind( "change.leadForm", $.proxy(methods.realEstateAgentToggler, $this) );
                    }
                    $( "#referral_PurchaseGoal" )
                        .bind( "change.leadForm", $.proxy(methods.currentlyRentingToggler, $this) );
                    $( "#referral_Leasing" ).bind( "change.leadForm", $.proxy(methods.leaseExpirationToggler, $this) );

                    // Banker Referral Form
                    if ( $( "#referral_ForYouOrSomeoneElse" ).length > 0 ) {
                        methods.forYouOrSomeoneElseToggler.apply( $this );
                        $( "#referral_ForYouOrSomeoneElse" )
                            .bind( "change.leadForm", $.proxy(methods.forYouOrSomeoneElseToggler, $this) );
                    }
                    // End Banker Referral Form

                    if ( $( "#Over62CheckboxContainer" ).length > 0 ) {

                        $loanPurpose.bind( "change.leadForm", $.proxy(function()
                        {
                            methods.over62Toggler.apply( this );
                            // changes the madlibs form headline when loan purpose changes
                            if( $(".arrangement_madlibs").length > 0 ) {
                                methods.changeHeadline.apply( this );
                            }
                        }, $this) );

                        $( "#referral_LoanAmount, #referral_HomeValue" )
                            .bind( "change.leadForm", $.proxy(methods.over62Toggler, $this) );
                    }

                    // When necessary, override the loan purpose set in the session in favor of the page default.
                    isValid = methods.isValidLoanPurpose( pageDefaultLoanPurpose );
                    if ( typeof pageDefaultLoanPurpose === "string" && isValid ) {
                        formData.defaultGroup = pageDefaultLoanPurpose;
                        // Clear out the loan purpose field when the form doesnt match the page default.
                        loanPurposeGroup = methods.getLoanPurposeGroup.call( $this );
                        if ( loanPurposeGroup !== formData.defaultGroup ) {
                            // Clearing the loan purpose value will force the default.
                            formData.$loanPurpose.val( '' );
                        }
                    }
                    // Displays the appropriate fields based on loan purpose value or form default.
                    methods.loanPurposeToggler.apply( $this );
                });
            },
            /**
            * Lets remove this plugin from the element.
            */
            "destroy": function ()
            {
                return this.each(function ()
                {
                    var $this = $( this ),
                        formData = $this.data( "leadForm" );

                    formData.leadForm.remove();
                    // (Revert the data- to its original state jQuery 1.4.3 +)
                    $this.removeData( "leadForm" );
                    $( window ).unbind( ".leadForm" );
                });
            },
            /**
            * Validate a loan purpose value
            */
            "isValidLoanPurpose": function ( p_purpose )
            {
                return formConstants.loanPurposes.hasOwnProperty( p_purpose );
            }
        };
    // END OF PUBLIC PLUGIN METHODS

    /*
    * Add the plugin to the element, call a plugin method, or throw an error if an invalid method was called.
    */
    $.fn.qlLeadForm = function ( p_method )
    {
        var newArgs;
        if ( methods.hasOwnProperty(p_method) ) {
            newArgs = Array.prototype.slice(arguments, 1);
            return methods[ p_method ].apply( this, newArgs );
        } else if ( typeof p_method === "object" || ! p_method ) {
            return methods.init.apply( this, arguments );
        } else {
            $.error( "Method '" + p_method + "' does not exists on jQuery.leadForm." );
        }
    }
})( window, jQuery );


jQuery( window ).load(function ()
{
    // Check for form errors
    $( "#referral" ).qlLeadForm();
    $( "#referral" ).qlLeadForm( 'scrollErrorsIntoView' );
    $( "#referral" ).countyTypeAhead();
});

(function ($) {
    $.fn.countyTypeAhead = function () {
        var $form            = null,
            counties         = [],
            possibleCounties = [],
            lastLength       = 0,
            $state           = null,
            $county          = null,
            $wrapper         = null,
            $countyPopDown   = $('<div class="etaForm__countyPopdown"></div>'),
            $countyList      = $('<ul class="etaForm__countyPopdown__list"></ul>'),
            options          = {
                stateField:  '#referral_PurchaseState',
                countyField: '#referral_PurchaseCounty',
                wrapper:     '.etaForm__fieldWrap',
                activeClass: '.etaForm__countyPopdown--activeCounty'
            };

        var methods = {
            init: function () {
                var fields = $form.find(options.stateField + ', ' + options.countyField);

                if(fields.length != 2) {
                    return;
                }

                $state   = $(fields[0]);
                $county  = $(fields[1]);
                $wrapper = $county.closest(options.wrapper);

                if(!$wrapper) {
                    return;
                }

                $wrapper.addClass('etaForm__fieldWrap--county');

                methods.configurePopDown();
                methods.configureStateField();
                methods.configureCountyField();
            },
            handleArrowKeyPress: function (code) {
                if(!possibleCounties.length) {
                    return;
                }

                var current = $(options.activeClass),
                    which   = null;

                switch(code) {
                    case 13: // Return/Enter
                        current.trigger('mousedown');
                        $county.trigger('blur');
                        return;
                    case 38: // Up Arrow
                        if(!current.length) {
                            var lis = $countyList.children('li');
                            which   = lis[lis.length - 1];
                        } else {
                            which = current.prev('li');
                        }
                        break;
                    case 40: // Down Arrow
                        if(!current.length) {
                            which = $countyList.children('li')[0];
                        } else {
                            which = current.next('li');
                        }
                }

                if(which) {
                    if(current) {
                        current.removeClass(options.activeClass.substring(1));
                    }

                    $(which).addClass(options.activeClass.substring(1));
                }

                methods.scrollToActive();
            },
            configureStateField: function () {
                var loadCounties = function () {
                    counties = [];

                    $.ajax('/state-county?st=' + $state.val().substring(0, 2), {
                        dataType: 'json',
                        success: function (r) {
                            counties = r;

                            if(counties.indexOf($county.val()) == -1) {
                                $county.val('');
                            }

                            if($county.is(':focus')) {
                                $county.trigger('focus');
                            }
                        },
                        fail: function () {
                            counties = [];
                        }
                    });
                };

                $state.on('change', loadCounties);

                // If the state field is pre-populated by
                // the backend, this will automatically
                // load all of the counties for that state
                if($state.val()) {
                    loadCounties();
                }
            },
            configureCountyField: function () {
                // We don't want the form to submit if the
                // use hits enter to select a county from
                // the suggestion pop down. This will stop
                // that from happening.
                $county.on('keydown', function (e) {
                    if(e.keyCode == 13) {
                        e.preventDefault();
                        return methods.handleArrowKeyPress(e.keyCode);
                    }
                });

                $county.on('focus keyup', function (e) {
                    if(e.keyCode && [38, 40].indexOf(e.keyCode) >= 0) {
                        return methods.handleArrowKeyPress(e.keyCode);
                    }

                    if(!counties.length) {
                        return;
                    }

                    var $this   = $(this),
                        value   = $this.val(),
                        matches = [],
                        regex   = new RegExp('^(' + value.toLowerCase() + ')');

                    // If the user deletes characters from the field
                    // that could potentially mean more possible
                    // counties.
                    if(value.length < lastLength || !possibleCounties.length) {
                        possibleCounties = counties;
                    }

                    if(value.length) {
                        possibleCounties.forEach(function (e, i) {
                            if(regex.test(e.toLowerCase()))
                                matches[matches.length] = e;
                        });
                    }

                    if(matches.length == 1 && matches[0] == value) {
                        return;
                    }

                    possibleCounties = matches;
                    lastLength       = value.length;

                    methods.showPopDown(matches);
                });

                $county.attr('autocomplete', 'off');

                $county.on('blur', function () {
                    methods.hidePopDown();
                });
            },
            configurePopDown: function () {
                $countyList.appendTo($countyPopDown);
            },
            configureList: function () {
                var holdOpenFlag;
                $countyList.find('li').each(function () {
                    $(this).on('mousedown touchstart', function () {
                        $county.val($(this).text());
                        possibleCounties = [];
                        holdOpenFlag     = false;
                    }).on('hover', function () {
                        $(options.activeClass).removeClass(options.activeClass.substring(1));
                        $(this).addClass(options.activeClass.substring(1));
                    });
                });

                holdOpenFlag = true;
                $countyPopDown.appendTo($wrapper);
            },
            showPopDown: function (matches) {
                methods.hidePopDown();

                if(!matches.length) {
                    return;
                }

                var counties;

                matches.forEach(function (e, i) {
                    $('<li>' + e + '</li>').appendTo($countyList);
                });

                methods.configureList();
            },
            hidePopDown: function () {
                $countyList.html('');
                $countyPopDown.remove();
            },
            scrollToActive: function () {
                var $active = $(options.activeClass),
                    sTop    = $countyList.offset().top + $countyList.scrollTop(),
                    sBottom = sTop + $countyList.height(),
                    aTop    = $active ? $active.offset().top : sTop;

                if(aTop < sTop || aTop > sBottom) {
                    $countyList.scrollTop(aTop);
                }
            }
        };

        $form = $(this);

        if(arguments.length == 1) {
            options = $.extend({}, options, arguments[0]);
        }

        methods.init();
    };
})(jQuery);
/**
 * Auto completion for county fields.
 */
(function ($) {
    $.fn.countyAutoComplete = function () {
        var $form            = null,
            counties         = [],
            possibleCounties = [],
            lastLength       = 0,
            $state           = null,
            $county          = null,
            $wrapper         = null,
            $countyPopDown   = $('<div class="county-popdown"></div>'),
            $countyList      = $('<ul class="county-popdown__list"></ul>'),
            options          = {
                stateField:  '#purchaseState',
                countyField: '#purchaseCounty',
                wrapper:     '.js-input-container',
                activeClass: '.county-popdown--activeCounty'
            };

        var methods = {
            init: function () {
                var fields = $form.find(options.stateField + ', ' + options.countyField);

                if(fields.length != 2) {
                    return;
                }

                $state   = $(fields[0]);
                $county  = $(fields[1]);
                $wrapper = $county.closest(options.wrapper);

                if(!$wrapper) {
                    return;
                }

                methods.configurePopDown();
                methods.configureStateField();
                methods.configureCountyField();
            },
            handleArrowKeyPress: function (code) {
                if(!possibleCounties.length) {
                    return;
                }

                var current = $(options.activeClass),
                    which   = null;

                switch(code) {
                    case 13: // Return/Enter
                        current.trigger('mousedown');
                        $county.trigger('blur');
                        return;
                    case 38: // Up Arrow
                        if(!current.length) {
                            var lis = $countyList.children('li');
                            which   = lis[lis.length - 1];
                        } else {
                            which = current.prev('li');
                        }
                        break;
                    case 40: // Down Arrow
                        if(!current.length) {
                            which = $countyList.children('li')[0];
                        } else {
                            which = current.next('li');
                        }
                }

                if(which) {
                    if(current) {
                        current.removeClass(options.activeClass.substring(1));
                    }

                    $(which).addClass(options.activeClass.substring(1));
                }

                methods.scrollToActive();
            },
            configureStateField: function () {
                var loadCounties = function () {
                    counties = [];

                    $.ajax('/state-county?st=' + $state.val().substring(0, 2), {
                        dataType: 'json',
                        success: function (r) {
                            counties = r;

                            if(counties.indexOf($county.val()) == -1) {
                                $county.val('');
                            }

                            if($county.is(':focus')) {
                                $county.trigger('focus');
                            }
                        },
                        fail: function () {
                            counties = [];
                        }
                    });
                };

                $state.on('change', loadCounties);

                // If the state field is pre-populated by
                // the backend, this will automatically
                // load all of the counties for that state
                if($state.val()) {
                    loadCounties();
                }
            },
            configureCountyField: function () {
                // We don't want the form to submit if the
                // use hits enter to select a county from
                // the suggestion pop down. This will stop
                // that from happening.
                $county.on('keydown', function (e) {
                    if(e.keyCode == 13) {
                        e.preventDefault();
                        return methods.handleArrowKeyPress(e.keyCode);
                    }
                });

                $county.on('focus keyup', function (e) {
                    if(e.keyCode && [38, 40].indexOf(e.keyCode) >= 0) {
                        return methods.handleArrowKeyPress(e.keyCode);
                    }

                    if(!counties.length) {
                        return;
                    }

                    var $this   = $(this),
                        value   = $this.val(),
                        matches = [],
                        regex   = new RegExp('^(' + value.toLowerCase() + ')');

                    // If the user deletes characters from the field
                    // that could potentially mean more possible
                    // counties.
                    if(value.length < lastLength || !possibleCounties.length) {
                        possibleCounties = counties;
                    }

                    if(value.length) {
                        possibleCounties.forEach(function (e, i) {
                            if(regex.test(e.toLowerCase()))
                                matches[matches.length] = e;
                        });
                    }

                    if(matches.length == 1 && matches[0] == value) {
                        return;
                    }

                    possibleCounties = matches;
                    lastLength       = value.length;

                    methods.showPopDown(matches);
                });

                $county.attr('autocomplete', 'off');
            },
            configurePopDown: function () {
                $countyList.appendTo($countyPopDown);
            },
            configureList: function () {
                var holdOpenFlag;
                $countyList.find('li').each(function () {
                    $(this).on('mousedown touchstart', function () {
                        $county.val($(this).text());
                        possibleCounties = [];
                        holdOpenFlag     = false;
                    }).on('hover', function () {
                        $(options.activeClass).removeClass(options.activeClass.substring(1));
                        $(this).addClass(options.activeClass.substring(1));
                    });
                });

                holdOpenFlag = true;
                $countyPopDown.appendTo($wrapper);

                // Once the user clicks a county, the dropdown goes away
                $countyPopDown.find('.county-popdown__list li').on("click", function() {
                     methods.hidePopDown();
                });

            },
            showPopDown: function (matches) {
                methods.hidePopDown();

                if(!matches.length) {
                    return;
                }

                var counties;

                matches.forEach(function (e, i) {
                    $('<li>' + e + '</li>').appendTo($countyList);
                });

                methods.configureList();
            },
            hidePopDown: function () {
                $countyList.html('');
                $countyPopDown.remove();
            },
            scrollToActive: function () {
                var $active = $(options.activeClass),
                    sTop    = $countyList.offset().top + $countyList.scrollTop(),
                    sBottom = sTop + $countyList.height(),
                    aTop    = $active ? $active.offset().top : sTop;

                if(aTop < sTop || aTop > sBottom) {
                    $countyList.scrollTop(aTop);
                }
            }
        };

        $form = $(this);

        if(arguments.length == 1) {
            options = $.extend({}, options, arguments[0]);
        }

        methods.init();
    };
})(jQuery);

//=require src/modules/jquery.modal.js
/*jslint nomen: true */
/*global jQuery, $, _, site: true */

//=require vendor/underscore-1.8.3.min.js

(function ($) {
    "use strict";

    $.fn.sideMenu = function (options) {
        var config = {
                side:        null,    // From what side of the page will this menu appear?
                easing:      'swing', // The jQuery easing animation.
                duration:    'slow',  // The amount of time the (in milliseconds) slide in and out should take.
                menu:        null,    // The selector for the menu container.
                content:     null,    // The selector for the content container.
                subMenus:    null,    // Selector for sub-menus, should not be more than one level deep.
                subShow:     null,    // Selector for showing sub-menus.
                subMenuItem: null     // Selector for sub-menu items.
            },
            $menuButton = null,
            $menu = null,
            $content = null,
            menuWidth = 0,
            isOpen = false,
            isSubOpen,
            menuClickEnabled = false,
            subMenuOpened = {},
            subMenuClosed = {},
            menuClosed = {},
            menuOpened = {},
            contentShifted = {},
            contentUnshifted = { left: 0 };

        function addClickHandler () {
            var $body = $('body');

            $body.on('click.sideMenu', $menuButton.selector, {}, function (e) {
                isOpen = !isOpen;
                slideMenu(isOpen);
            });
        }

        /**
         * Add click handlers for sub-menus.
         *
         * @param options
         */
        function addSubMenuClickers (options) {
            var $subMenus;

            if (typeof options.subMenus !== 'string') {
                return false;
            }

            $subMenus = $(options.subMenus);

            // Loop through all sub-menus, and add triggers.
            $subMenus.each(function () {
                var $subMenu, $showTrigger, $hideTrigger, $subNavItems;

                $subMenu = $(this);
                $showTrigger = $subMenu.parent().find(config.subShow);
                $hideTrigger = $subMenu.children(config.menuBack);
                $subNavItems = $subMenu.children(config.subMenuItem);

                // When there is no show trigger, then there is nothing to do.
                if ($showTrigger.length < 1) {
                    return false;
                }

                // BEGIN show sub-menu.
                $showTrigger.on('click.sideMenu', function () {
                    if(!menuClickEnabled) {
                        return true;
                    }
                    isSubOpen = !$subMenu.hasClass('open');
                    showSubMenu($subMenu, isSubOpen);
                    return true;
                });
                // END show sub-menu.

                // BEGIN hide sub-menu.
                $hideTrigger.on('click.sideMenu', function () {
                    if(!menuClickEnabled) {
                        return false;
                    }
                    isSubOpen = !$subMenu.hasClass('open');
                    showSubMenu($subMenu, isSubOpen);
                    // Prevent the event from bubbling up to the parent, which will cancel the hide.
                    return false;
                });
                // END hide sub-menu.

                // When sub-nav items are clicked, hide menus before navigating away.
                if (typeof $subNavItems === 'object' && $subNavItems !== null) {
                    $subNavItems.on('click.sideMenu', function () {
                        if (!menuClickEnabled) {
                            return true;
                        }
                        isOpen = false;
                        isSubOpen = false;
                        slideMenu(isOpen, 0);
                        showSubMenu($subMenu, isSubOpen, 0);
                    });
                }
            });
        }

        function slideMenu(show, duration) {
            animateMenu(show, duration);
            animateContent(show, duration);
        }

        function positionContent() {
            var content = config.content.split(', '); //keep the space as it allows clean code
            $.each(content, function (i, v) {
                if (content[i] !== '.c-Masthead') {
                    $(content[i]).css('position', 'relative');
                }
            });
        }

        function animateMenu (show, duration) {
            var $subMenu;

            if (duration === undefined) {
                duration = config.duration;
            }

            // Close any open sub-nav.
            $subMenu = $(options.subMenus + '.open');
            if ($subMenu.length > 0) {
                isSubOpen = false;
                showSubMenu($subMenu, isSubOpen);
            }

            // Toggle main nav.
            $menu.stop().animate(show ? menuOpened : menuClosed, duration, config.easing);
        }

        function animateContent (show, duration) {
            if (duration === undefined) {
                duration = config.duration;
            }

            // Toggle main nav.
            $content.stop().animate(show ? contentShifted : contentUnshifted, duration, config.easing);
        }

        function showMenu (show) {
            $menu.css(show ? menuOpened : menuClosed);
        }

        function shiftContent (show) {
            $content.css(show ? contentShifted : contentUnshifted);
        }

        function setSubMenusOpen() {
            var $subMenus = $(options.subMenus);

            $subMenus.each(function () {
                $(this).css('left', '');
                $(this).removeClass('open');
            });
        }

        /**
         * Cause sub-menus to slide over top of the main nav.
         *
         * @param $subMenu
         * @param show
         * @param duration
         */
        function showSubMenu ($subMenu, show, duration) {
            if (duration === undefined) {
                duration = config.duration;
            }

            (show) ?
                $subMenu.addClass('open') :
                $subMenu.removeClass('open');

            $subMenu.stop().animate(show ? subMenuOpened : subMenuClosed, duration, options.easing);
        }

        // BEGIN SETUP
        config = $.extend(config, options);

        if(config.side && (config.side !== 'left' && config.side !== 'right')) {
            throw new Error('sideMenu side must be "right" or "left", got "' + config.side + '".');
        }

        $menuButton  = $(this);
        if (config.side && config.menu && config.content) {
            $menu    = $(config.menu);
            $content = $(config.content);

            // Specify, or use the width of the menu.
            // Careful! This controls how far content is off screen when the menu is open.
            // If your menu is too wide, it may look like content disappeared.
            menuWidth = config.slideOut || $menu.width();

            if(config.side === 'left') {
                menuClosed = { left: '-' + menuWidth + 'px' };
                menuOpened = { left: 0 };
                contentShifted = { left: menuWidth + 'px' };
                subMenuOpened = { left: 0 };
                subMenuClosed = { left: '-' + menuWidth + 'px' };
            }
            else if(config.side === 'right') {
                menuClosed = { right: '-' + menuWidth + 'px' };
                menuOpened = { right: 0 };
                contentShifted = { left: '-' + menuWidth + 'px' };
                subMenuOpened = { right: 0 };
                subMenuClosed = { right: '-' + menuWidth + 'px' };
            }
            positionContent();
            addClickHandler();
            addSubMenuClickers(config);
        }
        // END SETUP

        return {
            isOpen: function () {
                return isOpen;
            },
            isButtonVisible: function () {
                return $menuButton.is(':visible');
            },
            enableMenuClick: function(enable) {
                menuClickEnabled = enable;
            },
            showMenu: showMenu,
            shiftContent: shiftContent,
            slideMenu: slideMenu,
            setSubMenusOpen: setSubMenusOpen
        };
    };

    $.fn.sideMenu.watchResize = function (menus) {
        if (menus.length === 0) {
            return;
        }

        menus[0].isButtonVisible() ? menus[0].enableMenuClick(true) : menus[0].enableMenuClick(false);

        $(window).on('resize', function () {
            _.each(menus, function (menu) {
                if (menus[0].isButtonVisible()) {
                    if (menu.isOpen()) {
                        menu.showMenu(true);
                        menu.shiftContent(true);
                    }
                    else {
                        menu.showMenu(false);
                    }
                    menu.enableMenuClick(true);
                } else {
                    menu.shiftContent(false);
                    menu.showMenu(true);
                    menu.setSubMenusOpen();
                    menu.enableMenuClick(false);
                }
            });
        });
    };
}(jQuery));

/*global window, jQuery */

(function($){
    //Appends QLS to any link tagged with data-qls="append"
    $('[data-qls="append"]').each(function () {
        var oldHref = $(this).attr('href'),
            hasQuery = oldHref.indexOf('?') !== -1 ? true : false,
            newHref = hasQuery ? [oldHref, '&qls=', $.cookie('qls')].join(''): [oldHref, '?qls=', $.cookie('qls')].join('');

        $(this).attr('href', newHref);
    });
})(jQuery);
/*global jQuery */

// Disclaimer Toggles
(function ($, undefined) {
    "use strict";

    $.fn.toggleSimple = function (options) {
        var settings = $.extend({
            switchSelector: '.simpleToggleSwitch',
            contentSelector: '.simpleToggleContent',
            hash: undefined,
            openByDefault: false,
            toggle: function ($toggle, $content) {
                if ($content.css('display') === 'block') {
                    $toggle.addClass('open');
                } else {
                    $toggle.removeClass('open');
                }
            }

        }, options);

        return this.each(function () {
            var $container  = $(this),
                $toggle     = $(this).find(settings.switchSelector),
                $content    = $(this).find(settings.contentSelector),
                openContent = settings.openByDefault,
                windowHash  = window.location.hash.replace('#', ''),
                $toggleLink = $toggle.children('a'),
                linkHash    = '';

            if (!$toggle.length) {
                return;
            }

            // when the hash is set on a switch
            if ($toggleLink.length > 0) {
                linkHash = ($toggleLink.attr('href').toString()).replace('#', '');
            }

            // when hash is present, check it against the window hash, and show if match, or force it.
            if ((linkHash.length > 0 && linkHash === windowHash) || (settings.hash && settings.hash === window.location.hash) || openContent) {
                $content.show();
                settings.toggle($toggle, $content);
            } else if (!openContent)  {
                $content.hide();
            }

            $toggle.click(function (e) {
                $content.toggle();
                settings.toggle($toggle, $content);
                if ($content.css('display') === 'block') {
                    $container.trigger('simpleToggle.toggle', ['open']);
                } else {
                    $container.trigger('simpleToggle.toggle', ['closed']);
                }
                e.preventDefault();
            });
        });
    };
}(jQuery));

/**
 * Bridges the gap between Adobe Analytics and JavaScript
 *
 * Please note: Because we have used the manual configuration for this tool,
 * DTM will treat Quickenloans.com as a Standard account.
 *
 * NOTE: If you want eVars to reset after every success, you need to configure
 * them to reset in the "Admin Console" (where ever that is).
 *
 * Helpful reading:
 * https://marketing.adobe.com/resources/help/en_US/sc/implement/eVarN.html
 * https://marketing.adobe.com/resources/help/en_US/sc/implement/propN.html
 */

/**
 *
 * @param {DocumentView} document
 * @param {Function} $ jQuery
 * @param {Object} _satellite
 * @param {Object} analyticsData Reference to ql.analyticsData.
 *
 * @constructor
 */
function AnalyticsBridge(document, $, _satellite, analyticsData)
{
    var satellite = _satellite;

    /**
     * Get analyticsData.
     *
     * @returns {Object}
     */
    this.getAnalyticsData = function () {
        return analyticsData;
    };

    /**
     * Get _satellite.
     * @returns {Object}
     */
    this.getSatellite = function () {
        return satellite;
    };
}

/**
 * Use this as an event handler to append additional metrics to the next track/track-link call.
 * NOTE Will NOT trigger page view or a track link on purpose.
 */
AnalyticsBridge.prototype.addMetrics = function (evt, addMetrics) {
    // DTM will copy this object to Adobes 's' object, then delete it.
    if (addMetrics !== null && typeof addMetrics === 'object') {
        this.getAnalyticsData().additionalMetrics = addMetrics;
    }
};

/**
 *
 * @param {Object} s Adobe's infamous s object.
 * @param {Object} metrics Additional metrics to copy over to the s object.
 * @returns {boolean}
 */
AnalyticsBridge.prototype.copyTo = function (appMeasurement, metrics) {
    var metric, linkTrackVars = '', linkTrackEvents = '',
        req1 = 'linkTrackVars',
        req2 = 'linkTrackEvents';

    for (var key in metrics) {
        // Do NOT go up the prototype chain.
        if (!metrics.hasOwnProperty(key)) {
            continue;
        }

        metric = metrics[key];
        // Add them to the metrics object.
        if (/^events$/.test(key)) {
            // Append events when some are already set.
            if (appMeasurement.hasOwnProperty(key)) {
                appMeasurement[key] = appMeasurement[key] + ',' + metric;
            } else {
                appMeasurement[key] = metric;
            }
            // Required in order for them to successfully be tracked.
            linkTrackEvents += metric;
        } else {
            appMeasurement[key] = metric;
            linkTrackVars += key;
        }
    }

    // Required for link track calls.
    if (!appMeasurement.hasOwnProperty(req1) || appMeasurement[req1] === 'None') {
        appMeasurement[req1] = linkTrackVars;
    } else {
        appMeasurement[req1] = appMeasurement[req1] + linkTrackVars
    }

    // Required for link track calls.
    if (!appMeasurement.hasOwnProperty(req2) || appMeasurement[req2] === 'None') {
        appMeasurement[req2] = linkTrackEvents;
    } else {
        appMeasurement[req2] = appMeasurement[req2] + linkTrackEvents
    }

    return true;
};

/**
 * Clear a defined set of props, eVars, and events on the Adobe Analytics "s" object.
 *
 * @param object s Adobe's infamous "s" object.
 * @param array items List of properties to clear.
 */
AnalyticsBridge.prototype.clear = function (s, items)
{
    // Delete items listed.
    for (var i = 0, l = items.length; i < l; i++) {
        if (typeof s[items[i]] !== 'undefined') {
            delete s[items[i]];
        }
    }
};

/**
 * Call the "form view" direct call rule.
 *
 * @param Event evt This has to be here so that this method can double as an event handler.
 * @param addMetrics
 */
AnalyticsBridge.prototype.formView = function (evt, addMetrics) {
    this.addMetrics(evt, addMetrics);

    this.getSatellite().track('form view');
};

/**
 * Call "page load" direct call rule.
 */
AnalyticsBridge.prototype.pageLoad = function (evt, addMetrics) {
    this.addMetrics(evt, addMetrics);

    this.getSatellite().track('page load');
};

/**
 * Track a page load and form view with a custom page name.
 * Calls "page loaded with form shown" direct call rule.
 *
 * @param pageName
 */
AnalyticsBridge.prototype.pageLoadWithFormView = function (evt, addMetrics) {
    this.addMetrics(evt, addMetrics);

    this.getSatellite().track('page loaded with form view');
};

/**
 * Call this to append some additional metrics to the next track/track-link call.
 * Does not trigger page view or a track link.
 */
AnalyticsBridge.prototype.removeAdditionalMetrics = function () {
    var analyticsData = this.getAnalyticsData();

    if (analyticsData.hasOwnProperty('additionalMetrics')) {
        delete analyticsData.additionalMetrics;
    }
};

// Export to node when running in nodejs environment, for example Jasmine specs
if (typeof module === 'object' && module.hasOwnProperty('exports')) {
    module.exports = AnalyticsBridge;
}
/*global jQuery */

/**
 * Given an element, toggles the next element (in DOM order) to it.
 */
function ToggleNext($, $elements, openAll) {
    "use strict";

    var windowHash = window.location.hash.replace('#', '');

    // Loop through all the triggers.
    $elements.each(function () {
        // Get the element next to the trigger.
        var link, $this = $(this);
        $this.on('click.ql', function () {
            $this.toggleClass('open');
        });

        // Open only one that matches the window hash.
        link = $this.attr('name');
        if (link === windowHash) {
            $this.removeClass('open');
            $this.addClass('open');
        }
    });

    // Open all on page load.
    if (openAll === true) {
        $elements.trigger('click');
    }
}
//=require src/modules/accordion.js
/**
 * jquery.mask.js
 * @version: v1.14.8
 * @author: Igor Escobar
 *
 * Created by Igor Escobar on 2012-03-10. Please report any bug at http://blog.igorescobar.com
 *
 * Copyright (c) 2012 Igor Escobar http://blog.igorescobar.com
 *
 * The MIT License (http://www.opensource.org/licenses/mit-license.php)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* jshint laxbreak: true */
/* jshint maxcomplexity:17 */
/* global define */

'use strict';

// UMD (Universal Module Definition) patterns for JavaScript modules that work everywhere.
// https://github.com/umdjs/umd/blob/master/jqueryPluginCommonjs.js
(function (factory, jQuery, Zepto) {

    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery || Zepto);
    }

}(function ($) {

    var Mask = function (el, mask, options) {

        var p = {
            invalid: [],
            getCaret: function () {
                try {
                    var sel,
                        pos = 0,
                        ctrl = el.get(0),
                        dSel = document.selection,
                        cSelStart = ctrl.selectionStart;

                    // IE Support
                    if (dSel && navigator.appVersion.indexOf('MSIE 10') === -1) {
                        sel = dSel.createRange();
                        sel.moveStart('character', -p.val().length);
                        pos = sel.text.length;
                    }
                    // Firefox support
                    else if (cSelStart || cSelStart === '0') {
                        pos = cSelStart;
                    }

                    return pos;
                } catch (e) {}
            },
            setCaret: function(pos) {
                try {
                    if (el.is(':focus')) {
                        var range, ctrl = el.get(0);

                        // Firefox, WebKit, etc..
                        if (ctrl.setSelectionRange) {
                            ctrl.setSelectionRange(pos, pos);
                        } else { // IE
                            range = ctrl.createTextRange();
                            range.collapse(true);
                            range.moveEnd('character', pos);
                            range.moveStart('character', pos);
                            range.select();
                        }
                    }
                } catch (e) {}
            },
            events: function() {
                el
                .on('keydown.mask', function(e) {
                    el.data('mask-keycode', e.keyCode || e.which);
                    el.data('mask-previus-value', el.val());
                })
                .on($.jMaskGlobals.useInput ? 'input.mask' : 'keyup.mask', p.behaviour)
                .on('paste.mask drop.mask', function() {
                    setTimeout(function() {
                        el.keydown().keyup();
                    }, 100);
                })
                .on('change.mask', function(){
                    el.data('changed', true);
                })
                .on('blur.mask', function(){
                    if (oldValue !== p.val() && !el.data('changed')) {
                        el.trigger('change');
                    }
                    el.data('changed', false);
                })
                // it's very important that this callback remains in this position
                // otherwhise oldValue it's going to work buggy
                .on('blur.mask', function() {
                    oldValue = p.val();
                })
                // select all text on focus
                .on('focus.mask', function (e) {
                    if (options.selectOnFocus === true) {
                        $(e.target).select();
                    }
                })
                // clear the value if it not complete the mask
                .on('focusout.mask', function() {
                    if (options.clearIfNotMatch && !regexMask.test(p.val())) {
                       p.val('');
                   }
                });
            },
            getRegexMask: function() {
                var maskChunks = [], translation, pattern, optional, recursive, oRecursive, r;

                for (var i = 0; i < mask.length; i++) {
                    translation = jMask.translation[mask.charAt(i)];

                    if (translation) {

                        pattern = translation.pattern.toString().replace(/.{1}$|^.{1}/g, '');
                        optional = translation.optional;
                        recursive = translation.recursive;

                        if (recursive) {
                            maskChunks.push(mask.charAt(i));
                            oRecursive = {digit: mask.charAt(i), pattern: pattern};
                        } else {
                            maskChunks.push(!optional && !recursive ? pattern : (pattern + '?'));
                        }

                    } else {
                        maskChunks.push(mask.charAt(i).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
                    }
                }

                r = maskChunks.join('');

                if (oRecursive) {
                    r = r.replace(new RegExp('(' + oRecursive.digit + '(.*' + oRecursive.digit + ')?)'), '($1)?')
                         .replace(new RegExp(oRecursive.digit, 'g'), oRecursive.pattern);
                }

                return new RegExp(r);
            },
            destroyEvents: function() {
                el.off(['input', 'keydown', 'keyup', 'paste', 'drop', 'blur', 'focusout', ''].join('.mask '));
            },
            val: function(v) {
                var isInput = el.is('input'),
                    method = isInput ? 'val' : 'text',
                    r;

                if (arguments.length > 0) {
                    if (el[method]() !== v) {
                        el[method](v);
                    }
                    r = el;
                } else {
                    r = el[method]();
                }

                return r;
            },
            calculateCaretPosition: function(caretPos, newVal) {
                var newValL = newVal.length,
                    oValue  = el.data('mask-previus-value'),
                    oValueL = oValue === undefined ? 0 : oValue.length;

                // edge cases when erasing digits
                if (el.data('mask-keycode') === 8 && oValue !== newVal) {
                    caretPos = caretPos - (newVal.slice(0, caretPos).length - oValue.slice(0, caretPos).length);

                // edge cases when typing new digits
                } else if (oValue !== newVal) {
                    // if the cursor is at the end keep it there
                    if (caretPos >= oValueL) {
                        caretPos = newValL;
                    } else {
                        caretPos = caretPos + (newVal.slice(0, caretPos).length - oValue.slice(0, caretPos).length);
                    }
                }

                return caretPos;
            },
            behaviour: function(e) {
                e = e || window.event;
                p.invalid = [];

                var keyCode = el.data('mask-keycode');

                if ($.inArray(keyCode, jMask.byPassKeys) === -1) {
                    var newVal   = p.getMasked(),
                        caretPos = p.getCaret();

                    setTimeout(function(caretPos, newVal) {
                      p.setCaret(p.calculateCaretPosition(caretPos, newVal));
                    }, 10, caretPos, newVal);

                    p.val(newVal);
                    p.setCaret(caretPos);
                    return p.callbacks(e);
                }
            },
            getMasked: function(skipMaskChars, val) {
                var buf = [],
                    value = val === undefined ? p.val() : val + '',
                    m = 0, maskLen = mask.length,
                    v = 0, valLen = value.length,
                    offset = 1, addMethod = 'push',
                    resetPos = -1,
                    lastMaskChar,
                    check;

                if (options.reverse) {
                    addMethod = 'unshift';
                    offset = -1;
                    lastMaskChar = 0;
                    m = maskLen - 1;
                    v = valLen - 1;
                    check = function () {
                        return m > -1 && v > -1;
                    };
                } else {
                    lastMaskChar = maskLen - 1;
                    check = function () {
                        return m < maskLen && v < valLen;
                    };
                }

                var lastUntranslatedMaskChar;
                while (check()) {
                    var maskDigit = mask.charAt(m),
                        valDigit = value.charAt(v),
                        translation = jMask.translation[maskDigit];

                    if (translation) {
                        if (valDigit.match(translation.pattern)) {
                            buf[addMethod](valDigit);
                             if (translation.recursive) {
                                if (resetPos === -1) {
                                    resetPos = m;
                                } else if (m === lastMaskChar) {
                                    m = resetPos - offset;
                                }

                                if (lastMaskChar === resetPos) {
                                    m -= offset;
                                }
                            }
                            m += offset;
                        } else if (valDigit === lastUntranslatedMaskChar) {
                            // matched the last untranslated (raw) mask character that we encountered
                            // likely an insert offset the mask character from the last entry; fall
                            // through and only increment v
                            lastUntranslatedMaskChar = undefined;
                        } else if (translation.optional) {
                            m += offset;
                            v -= offset;
                        } else if (translation.fallback) {
                            buf[addMethod](translation.fallback);
                            m += offset;
                            v -= offset;
                        } else {
                          p.invalid.push({p: v, v: valDigit, e: translation.pattern});
                        }
                        v += offset;
                    } else {
                        if (!skipMaskChars) {
                            buf[addMethod](maskDigit);
                        }

                        if (valDigit === maskDigit) {
                            v += offset;
                        } else {
                            lastUntranslatedMaskChar = maskDigit;
                        }

                        m += offset;
                    }
                }

                var lastMaskCharDigit = mask.charAt(lastMaskChar);
                if (maskLen === valLen + 1 && !jMask.translation[lastMaskCharDigit]) {
                    buf.push(lastMaskCharDigit);
                }

                return buf.join('');
            },
            callbacks: function (e) {
                var val = p.val(),
                    changed = val !== oldValue,
                    defaultArgs = [val, e, el, options],
                    callback = function(name, criteria, args) {
                        if (typeof options[name] === 'function' && criteria) {
                            options[name].apply(this, args);
                        }
                    };

                callback('onChange', changed === true, defaultArgs);
                callback('onKeyPress', changed === true, defaultArgs);
                callback('onComplete', val.length === mask.length, defaultArgs);
                callback('onInvalid', p.invalid.length > 0, [val, e, el, p.invalid, options]);
            }
        };

        el = $(el);
        var jMask = this, oldValue = p.val(), regexMask;

        mask = typeof mask === 'function' ? mask(p.val(), undefined, el,  options) : mask;

        // public methods
        jMask.mask = mask;
        jMask.options = options;
        jMask.remove = function() {
            var caret = p.getCaret();
            p.destroyEvents();
            p.val(jMask.getCleanVal());
            p.setCaret(caret);
            return el;
        };

        // get value without mask
        jMask.getCleanVal = function() {
           return p.getMasked(true);
        };

        // get masked value without the value being in the input or element
        jMask.getMaskedVal = function(val) {
           return p.getMasked(false, val);
        };

       jMask.init = function(onlyMask) {
            onlyMask = onlyMask || false;
            options = options || {};

            jMask.clearIfNotMatch  = $.jMaskGlobals.clearIfNotMatch;
            jMask.byPassKeys       = $.jMaskGlobals.byPassKeys;
            jMask.translation      = $.extend({}, $.jMaskGlobals.translation, options.translation);

            jMask = $.extend(true, {}, jMask, options);

            regexMask = p.getRegexMask();

            if (onlyMask) {
                p.events();
                p.val(p.getMasked());
            } else {
                if (options.placeholder) {
                    el.attr('placeholder' , options.placeholder);
                }

                // this is necessary, otherwise if the user submit the form
                // and then press the "back" button, the autocomplete will erase
                // the data. Works fine on IE9+, FF, Opera, Safari.
                if (el.data('mask')) {
                  el.attr('autocomplete', 'off');
                }

                // detect if is necessary let the user type freely.
                // for is a lot faster than forEach.
                for (var i = 0, maxlength = true; i < mask.length; i++) {
                    var translation = jMask.translation[mask.charAt(i)];
                    if (translation && translation.recursive) {
                        maxlength = false;
                        break;
                    }
                }

                if (maxlength) {
                    el.attr('maxlength', mask.length);
                }

                p.destroyEvents();
                p.events();

                var caret = p.getCaret();
                p.val(p.getMasked());
                p.setCaret(caret);
            }
        };

        jMask.init(!el.is('input'));
    };

    $.maskWatchers = {};
    var HTMLAttributes = function () {
        var input = $(this),
            options = {},
            prefix = 'data-mask-',
            mask = input.attr('data-mask');

        if (input.attr(prefix + 'reverse')) {
            options.reverse = true;
        }

        if (input.attr(prefix + 'clearifnotmatch')) {
            options.clearIfNotMatch = true;
        }

        if (input.attr(prefix + 'selectonfocus') === 'true') {
           options.selectOnFocus = true;
        }

        if (notSameMaskObject(input, mask, options)) {
            return input.data('mask', new Mask(this, mask, options));
        }
    },
    notSameMaskObject = function(field, mask, options) {
        options = options || {};
        var maskObject = $(field).data('mask'),
            stringify = JSON.stringify,
            value = $(field).val() || $(field).text();
        try {
            if (typeof mask === 'function') {
                mask = mask(value);
            }
            return typeof maskObject !== 'object' || stringify(maskObject.options) !== stringify(options) || maskObject.mask !== mask;
        } catch (e) {}
    },
    eventSupported = function(eventName) {
        var el = document.createElement('div'), isSupported;

        eventName = 'on' + eventName;
        isSupported = (eventName in el);

        if ( !isSupported ) {
            el.setAttribute(eventName, 'return;');
            isSupported = typeof el[eventName] === 'function';
        }
        el = null;

        return isSupported;
    };

    $.fn.mask = function(mask, options) {
        options = options || {};
        var selector = this.selector,
            globals = $.jMaskGlobals,
            interval = globals.watchInterval,
            watchInputs = options.watchInputs || globals.watchInputs,
            maskFunction = function() {
                if (notSameMaskObject(this, mask, options)) {
                    return $(this).data('mask', new Mask(this, mask, options));
                }
            };

        $(this).each(maskFunction);

        if (selector && selector !== '' && watchInputs) {
            clearInterval($.maskWatchers[selector]);
            $.maskWatchers[selector] = setInterval(function(){
                $(document).find(selector).each(maskFunction);
            }, interval);
        }
        return this;
    };

    $.fn.masked = function(val) {
        return this.data('mask').getMaskedVal(val);
    };

    $.fn.unmask = function() {
        clearInterval($.maskWatchers[this.selector]);
        delete $.maskWatchers[this.selector];
        return this.each(function() {
            var dataMask = $(this).data('mask');
            if (dataMask) {
                dataMask.remove().removeData('mask');
            }
        });
    };

    $.fn.cleanVal = function() {
        return this.data('mask').getCleanVal();
    };

    $.applyDataMask = function(selector) {
        selector = selector || $.jMaskGlobals.maskElements;
        var $selector = (selector instanceof $) ? selector : $(selector);
        $selector.filter($.jMaskGlobals.dataMaskAttr).each(HTMLAttributes);
    };

    var globals = {
        maskElements: 'input,td,span,div',
        dataMaskAttr: '*[data-mask]',
        dataMask: true,
        watchInterval: 300,
        watchInputs: true,
        // old versions of chrome dont work great with input event
        useInput: !/Chrome\/28/.test(window.navigator.userAgent) && eventSupported('input'),
        watchDataMask: false,
        byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91],
        translation: {
            '0': {pattern: /\d/},
            '9': {pattern: /\d/, optional: true},
            '#': {pattern: /\d/, recursive: true},
            'A': {pattern: /[a-zA-Z0-9]/},
            'S': {pattern: /[a-zA-Z]/}
        }
    };

    $.jMaskGlobals = $.jMaskGlobals || {};
    globals = $.jMaskGlobals = $.extend(true, {}, globals, $.jMaskGlobals);

    // looking for inputs with data-mask attribute
    if (globals.dataMask) {
        $.applyDataMask();
    }

    setInterval(function() {
        if ($.jMaskGlobals.watchDataMask) {
            $.applyDataMask();
        }
    }, globals.watchInterval);
}, window.jQuery, window.Zepto));


(function () {
  // Masthead Search
  const searchMastheadContainer = document.querySelector('[data-masthead-search="container"]');
  const searchMastheadIcon = document.querySelector('[data-masthead-search="trigger"]');
  const searchMastheadClose = document.querySelector('[data-masthead-search="close"]');
  const searchMastheadInput = document.querySelector('[data-masthead-search="input"]');
  
  if (searchMastheadContainer) {
    searchMastheadIcon.addEventListener('click', function (e) {
      e.preventDefault();
      searchMastheadContainer.classList.add('c-MastheadSearch__wrapper--open');
      searchMastheadInput.focus();
    });

    searchMastheadClose.addEventListener('click', function (e) {
      e.preventDefault();
      searchMastheadContainer.classList.remove('c-MastheadSearch__wrapper--open');
    })

    document.addEventListener('keyup', function (e) {
      if (e.keyCode === 27) {
        searchMastheadContainer.classList.remove('c-MastheadSearch__wrapper--open');
        searchMastheadIcon.focus();
      }
    })

    // Search for both masthead and page forms
    const searchForm = document.querySelector('.js-SearchForm');
    const searchInput = document.querySelector('.js-SearchInput');

    // Prevent form submission if they don't add a term.
    searchForm.addEventListener("submit", function (e) {
      if (searchInput.value === '') {
        e.preventDefault();
      }
    });
  }
})();


// Scroll to and toggle assumptions container
if ($('.scrollToAssumptions').length) {
    $().scrollToAssumptions();
}

var toggleNext = new ToggleNext(jQuery, jQuery('.js-toggle-next'));

jQuery(document).ready(function ($) {
    ql.analyticsBridge = new AnalyticsBridge(window, $, window._satellite, ql.analyticsData);

    // After five seconds use the default phone number
    // if Invoca hasn't returned something.
    setTimeout(function() {
        $('[data-default-phone]').each(function() {
            var $el = $(this);
            var defaultPhone = $el.data('default-phone');

            if($el.html() !== '') {
                $el.parent('[href]').attr('href', 'tel:+1 ' + $el.html());
                return;
            }

            $el.html(defaultPhone);
            $el.parent('[href]').attr('href', 'tel:+1 ' + defaultPhone);
        });
    }, 5000);

    // Add toggle to all disclaimer elements.
    $('.simpleToggle, .assumptionsSimpleToggle').toggleSimple();

    // Toggle disclaimers when on small screens.
    $(document).on('click', '.legal__trigger', function () {
        var $legalTrigger = $(this),
            triggerIsOpen = !$legalTrigger.hasClass('open');

        $('.legal .legal__toggle').each(function () {
            var $legalBlock = $(this),
                legalIsOpen = $legalBlock.hasClass('open');

            if ((triggerIsOpen && !legalIsOpen) || (!triggerIsOpen && legalIsOpen)) {
                $legalBlock.trigger('click');
            }
        });

        $legalTrigger.toggleClass('open');
    });

    // Setup Modals
    $('.armFutureAdjustments__trigger').armModal();

    $('#lead').countyAutoComplete();
});

// Trigger the Adobe DTM bottom event.
if (typeof _satellite !== 'undefined') {
    _satellite.pageBottom();
}
