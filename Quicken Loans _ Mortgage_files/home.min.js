(function ($) {

    $.fn.newModal = function (eventName, element, config) {
        // settings
        var settings = $.extend({
            cancelText: 'Cancel',
            cancelTag: ' ',
            confirmText: 'Confirm',
            cancelFunction: function () {
                $('.c-ModalMask').remove();
                $('.c-Modal').remove();
            },
            confirmFunction: function () {
                window.location.pathname = settings.confirmURL;
            },
            confirmURL: '/',
            content: 'This is default modal content',
            modalTitle: 'Are you sure?',
            cancelEvent: 'ModalCancelEvent',
            confirmEvent: 'ModalConfirmEvent',
            confirmSwitch: true
        }, config);

        //create the modal's pieces, define vars
        var modalMask     = $('<div class="c-ModalMask"></div>'),
            modalBox      = $('<div class="c-Modal" data-qa="modal"></div>'),
            cancelLink  = $('<a class="o-Link--alt" href="" data-qa="modal-close"'+ settings.cancelTag +'></a>')
                .text(settings.cancelText),
            confirmButton = $('<button class="sls-c-Button c-Button c-Modal__confirm sls-u-mrm"></button>')
                .text(settings.confirmText),
            modalFooter   = $('<footer class="c-Modal__footer"></footer>'),
            modalTitle    = $('<header class="c-Modal__header"><h2 class="c-Modal__heading b-Heading--sub">'+ settings.modalTitle +'</h2>'
            + '<a class="c-Modal__close o-Link--alt" href="" data-qa="modal-close"'+ settings.cancelTag +'>'
            + '<svg class="c-Modal__closeIcon c-Icon--muted" width="30" height="30" viewBox="0 0 32 32"><use xlink:href="#cross" /></svg>'
            + '</a></header>'),
            modalText = $('<div class="c-Modal__body">' + settings.content + '</div>'),
            $body = $('body'),
            lastFocus;

        // put the modal together
        modalBox
            .append(modalTitle)
            .append(modalText);
        if (settings.confirmSwitch) {
            modalFooter
                .append(confirmButton);
        }
        modalFooter
            .append(cancelLink);
        modalBox
            .append(modalFooter);

        // when the event its listening for fires
        element.on(eventName, function () {

            var modalExit = function (e) {
              e.preventDefault();
              settings.cancelFunction();
              element.trigger(settings.cancelEvent);
              $body.css('overflow', 'auto');
              returnFocus();
            }

            //if its not already there
            if (element.find('.c-Modal').size() === 0) {

                $body.css('overflow', 'hidden');

                //save the last thing that was focused
                lastFocus = element.find(':focus');

                //attach it
                element
                    .before(modalBox)
                    .before(modalMask);

                //focus on the confirm button
                modalFocus();

                //need to restrict focus/blur to the modal window (using DOM API)
                element.get(0).onfocusin = modalFocus(); // for IE (no event capturing support)
                element.get(0).onfocusout = modalFocus(); // for IE (no event capturing support)
                element.get(0).addEventListener("focus", modalFocus, true);
                element.get(0).addEventListener('blur', modalFocus, true);

                cancelLink.on('click', function (e) {
                    modalExit(e);
                });

                $('.c-Modal__close').on('click', function (e) {
                    modalExit(e);
                });

                confirmButton.on('click', function () {
                    settings.confirmFunction();
                    element.trigger(settings.confirmEvent);
                });

                // if somebody clicks outside the modal assume they want to cancel
                modalMask.on('click', function (e) {
                    modalExit(e);
                });

                // if somebody presses ESC
                $('body').keyup(function (e) {
                    if (e.code === 'Escape' || e.keyCode === 27) {
                        modalExit(e);
                    }
                });
            }
        });

        function modalFocus() {
            confirmButton.focus();
            modalTitle.focus();
        }

        function returnFocus() {
            lastFocus.focus();
        }
    };
}( jQuery ));


const ERROR_ZIP_EMPTY = 'Please enter your zip code';
const ERROR_ZIP_FORMAT = 'Your zip code must contain only numbers, formatted like: 48152';
const ERROR_REJECT_CLASS = 'form-validation-alert';
var zipCache = {};
/**
 *
 * @param jQuery $form
 * @param string fieldParentSelector CSS selector for the fields parent
 * @param string messageSelector CSS selector for the fields' validation message.
 * @constructor
 */
function Validation(_, $form, fieldParentSelector, messageSelector) {
    this.$form = $form;
    this.fieldsToValidate = this.$form.find("[data-validation]");

    this.fieldsToValidate.each(function () {
        var $field = $(this),
            $parent = $field.closest(fieldParentSelector),
            $messageField = $parent.find(messageSelector),
            validator = Validation.prototype[this.dataset.validation];

        Validation.prototype.appendValidator(
            validator,
            $field,
            $messageField,
            $parent
        );
    });

    // Attach the validation method to the form.
    this.$form.validation = Validation.prototype.validate;

    this.moduleName = 'Validation';

    // Quickly clear errors when correct input is seen
    this.$form.on('keyup', '[data-validation]', _.debounce(function (e) {
        //Dont validate if no key was entered was nothing AND tab
        if (e.which !== 0 && e.which !== 9) {
            var field = e.target;
                field.validate();
        }
    }, 200));

    // Quickly clear errors when correct input is seen ... for dropdown
    this.$form.on('change', 'select[data-validation], :checkbox', _.debounce(function (e) {
        var field = e.target;
            field.validate();
    }, 200));
};
Validation.prototype.addValidator = function () {
    "use strict";

}

/**
 * Append a validator to a DOM element, that when run will validate the element.
 *
 * When the element is invalid, an error message will be displayed in the DOM
 * message element.
 *
 * @param validatorName Name of the validator function to run on the element.
 *        See methods attached to the prototype chain of this class.
 * @param jQuery $field A jQuery wrapped HTML DOM element object.
 * @param HTMLElement message
 * @param jQuery parent A jQuery wrapped HTML DOM element object.
 */
Validation.prototype.appendValidator = function (validator, $field, message, parent) {
    // Attaches the method to the actual DOM element, not the jQuery wrapper.
    $field[0]['validate'] = function () {
        var deferred, result, fieldName,fieldValue, radioFields, checkFields;

        fieldName = $field.attr("name");

        // the fields for radio
        radioFields = ['includeVa'];

        // the fields for checkBox
        checkFields = ['tcpaCompliant'];

        if (radioFields.indexOf(fieldName) >= 0) {
          fieldValue = $('input:radio[name=' + fieldName + ']:checked').val();
        } else if (checkFields.indexOf(fieldName) >= 0) {
          fieldValue = $('input[type=checkbox][name=' + fieldName + ']').is(':checked');
        } else {
          fieldValue = $field.val();
        }

        deferred = new $.Deferred();
        result = validator(fieldValue, message);

        if (result === true) {
            parent.removeClass(ERROR_REJECT_CLASS);
            deferred.resolve();
        } else if (result === false) {
            parent.addClass(ERROR_REJECT_CLASS);
            deferred.reject(result);
        } else if (result.then) { //This is used to wait for other promises, eg zip code validation
            result.then(function () {
                parent.removeClass(ERROR_REJECT_CLASS);
                deferred.resolve();
             },
            function (failMessage) {
                parent.addClass(ERROR_REJECT_CLASS);
                deferred.reject(result);
            });
        }

        return deferred.promise();
    }
};

/**
 * Validate all fields, return promise which will resolve if all pass and reject otherwise
 * When the optional argument $field is passed, only validate that field
 */
Validation.prototype.validate = function () {
    var promises, moduleName;

    promises = [];
    moduleName = this.moduleName;

    this.fieldsToValidate.each(function () {
        var $element = $(this),
            promise;

        promise = this.validate();

        // We want to show the error message when a validator fails.
        promise.fail(function (message) {
            $element.trigger('invalid.' + moduleName, [message]);
        });
        promise.done(function () {
            $element.trigger('valid.' + moduleName);
        });

        promises.push(promise);
    });

    // This overall promise resolves when every validator on every element passes
    return $.when.apply($, promises);
};

Validation.prototype.validators = {};

/**
 * Run the parts of a phone number through validation.
 *
 * Note: Some of the rules follow NANPA, others are custom.
 *
 * NANP numbers are ten-digit numbers consisting of a three-digit Numbering
 * Plan Area (NPA) code, commonly called an area code, followed by a
 * seven-digit local number. The format is usually represented as
 *                      NXX-NXX-XXXX
 * where N is any digit from 2 through 9 and X is any digit from 0 through
 * 9.
 * see: http://www.nanpa.com/about_us/abt_nanp.html
 *
 * @param string areaCode
 * @param string prefix
 * @param string suffix
 *
 * @return bool
 */
function isPhoneValid(areaCode, prefix, suffix) {
    var phoneNo = (prefix + suffix).toString();
    // Area code first digit cannot be 0 or 1, and the second digit cannot be a 9.
    if (/[2-9][0-8][0-9]/.test(areaCode)
        // Area code last 2 digits can only be equal when the first digit is an 8.
        && !(areaCode.charAt(0) !== '8' && areaCode.charAt(1) === areaCode.charAt(2))
        // Area code must contain 3 digits, and cannot begin with 0 or 1.
        && /[2-9][0-9]{2}/.test(areaCode)
        // Exchange code must contain 3 digits, and cannot begin with 0 or 1.
        && /[2-9][0-9]{2}/.test(prefix)
        // Verify the information number was not entered.
        && phoneNo !== '5551212'
        // Subscriber number must be 4 digits.
        && /[0-9]{4}/.test(suffix)
        // Check all numbers are not the same.
        && !/^(\d)\1*$/.test(phoneNo)) {
        return true;
    }
    return false;
}

Validation.prototype.zipWithAVS = function (zip, $messageField) {
    var d = new $.Deferred(), promise;

    $messageField.html('');

    if (zip.length === 0) {
        d.reject(ERROR_ZIP_EMPTY);
        promise = d.promise();
    } else if (!ql.regex.ZIPCODE.test(zip)) {
        d.reject(ERROR_ZIP_FORMAT);
        promise = d.promise();
    } else {
        promise = avsLookup(zip, d);
    }

    return promise.then(function() {
    }, function (failMessage) {
        $messageField.html(failMessage);
    });
}

var avsLookup = function (zip, d) {
    var name = 'zipCode', //This is what the endpoint needs, not the name of the input on the page
        postData = {},
        jqXHR;

    // Return cached validation result if available
    if (zipCache[zip] !== undefined) {
        return zipCache[zip];
    }

    postData[name] = zip;

    jqXHR = $.ajax({
        url: '/zip-avs-validation',
        beforeSend: function (xhr) {
            xhr.setRequestHeader('ACTION_APPENDITURE', 'JSON');
        },
        dataType: 'json',
        type: 'POST',
        data: postData
    });

    jqXHR.done(function (response) {
        if (response.hasOwnProperty('valid') && response['valid'] !== true && response['valid'] !== '') {
            d.reject(response['errorMessage']);
        } else {
            d.resolve();
        }
    });

    jqXHR.fail(function () {
        // If ajax request fails, assume zip is valid, let server return error on form submission
        d.resolve();
    });

    zipCache[zip] = d.promise(); // Cache

    return d.promise();
}

/**
 * Validate home value.
 */
Validation.prototype.homeValue = function (homeValue, $messageField) {
    var message = "";

    if (homeValue.length < 1) {
        message = "Please select your home's value.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate home value.
 */
Validation.prototype.homeEstValue = function (homeEstValue, $messageField) {
    var message = "";

    if (homeEstValue.length < 1) {
        message = "Please enter your estimated home value.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate empty field.
 *
 * @param value
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.downPayment = function (value, $messageField) {
    var downPayment = parseFloat(value.replace(/,/g, ''), 10),
        purchasePrice = parseFloat($('[name="purchase[PurchasePrice]"], [data-validation="purchasePrice"]').val().replace(/,/g, ''), 10),
        minLTV,
        useVALoans,
        minPercentDown = 0.03,
        format = /(\d)(?=(\d{3})+\.)/g,
        message = "",
        loanAmount;

    if (isNaN(downPayment)) {
        message = "Please enter the down payment amount.";
        $messageField.html(message);
        return false;
    }

    // Its done this way to prevent an error message from prematurely
    // popping up.
    if (!isNaN(purchasePrice)) {

        // No need for a loan when you have all the monies.
        if (downPayment >= purchasePrice) {
            message =  "Your down payment $"
                + downPayment.toFixed(2).replace(format, '$1,').replace(/\.\d+/, '')
                + " must be less than the purchase price $"
                + purchasePrice.toFixed(2).replace(format, '$1,').replace(/\.\d+/, '');
            $messageField.html(message);
            return false;
        }

        loanAmount = purchasePrice - downPayment;
        if (loanAmount < 25000 || loanAmount > 3000000) {
            message =  "Loan amount must be $25,000 - $3,000,000";
            $messageField.html(message);
            return false;
        }

        useVALoans = $('[name="purchase[UseVALoans]"], [data-validation="useVALoans"]').val();
        if (useVALoans == '' || typeof useVALoans === 'undefined') {
            useVALoans = $('#purchase_UseVALoans').val();
        }

        // for the purchase calc
        if (useVALoans == '' || typeof useVALoans === 'undefined') {
            useVALoans = $('input:radio[name=includeVa]:checked').val();
            if (typeof useVALoans === 'undefined') {
              useVALoans = $('input:radio[name=includeVaPurch]:checked').val();
            }
        }

        // for the lead form
        if (useVALoans == '' || typeof useVALoans === 'undefined') {
            useVALoans = $('#vaEligible').val();
        }

        if (useVALoans !== '1') {
            // calculate minimum down payment based on shared copy value.
            minLTV = purchasePrice * minPercentDown;
            // The down payment is not enough.
            if (downPayment < minLTV) {
                message =  "You need at least $"
                    + minLTV.toFixed(2).replace(format, '$1,').replace(/\.\d+/, '')
                    + " for a down payment.";
                $messageField.html(message);
                return false;
            }
        }
    }

    $messageField.html(message);
    return true;
};

Validation.prototype.purchasePrice = function (value, $messageField) {
    var purchasePrice = parseFloat(value, 10),
        $downPayment = $('[name="purchase[DownPayment]"], [data-validation="downPayment"]'),
        downPayment = parseFloat($downPayment.val().replace(/,/g, ''), 10),
        message = "";

    if (isNaN(purchasePrice)) {
        $messageField.html("Please enter your purchase price.");
        return false;
    }

    // trigger down-payment validation if it has been altered by the client.
    if (!isNaN(downPayment) && downPayment != '') {
        $downPayment.trigger('blur');
    }

    $messageField.html(message);
    return true;
};

/**
 * Validate city.
 * @param city
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.city = function (city, $messageField) {
    var message = '';

    if (city.length < 1) {
        message = "Please enter your city";
    } else if (!ql.regex.LOLA_CITY.test(city)) {
        message = "Your city must only contain letters.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate firstName.
 * @param firstName
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.firstName = function (firstName, $messageField) {
    var message = '';

    if (firstName.length < 1) {
        message = "Please enter your first name.";
    } else if (!ql.regex.LOLA_NAME.test(firstName)) {
        message = "Your first name must only contain letters.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate lastName.
 * @param lastName
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.lastName = function (lastName, $messageField) {
    var message = '';

    if (lastName.length < 1) {
        message = "Please enter your last name.";
    } else if (!ql.regex.LOLA_NAME.test(lastName)) {
        message = "Your last name must only contain letters.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate homePhone.
 * @param homePhone
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.homePhone = function (homePhone, $messageField) {
    var homePhone = $('#homePhone').val(),
        phone3 = homePhone.split('-'),
        areaCode = phone3[0],
        prefix = phone3[1],
        suffix = phone3[2],
        message = '';

    if (!isPhoneValid(areaCode, prefix, suffix)) {
        message = "Please enter a valid phone number.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate mortgage goal
 *
 * @param goal
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.mortgageGoal = function (goal, $messageField) {
    var message = "";

    if (goal.length < 1) {
        message = "Please choose one.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate loan amount
 *
 * @param loanAmount
 * @param homeValue
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.loanAmount = function (loanAmount, $messageField) {
  var maxLTV, message = "";
  var homeValue = $('[name="homeValue"], [data-validation="homeValue"]');

  if (loanAmount.length < 1) {
    message = "Please select your loan amount.";
  } else if (homeValue.length > 0) {
    maxLTV = parseInt(homeValue, 10) * 2.00;

    // Your cannot borrow more than twice the value of your home.
    if (loanAmount > maxLTV) {
      message = "The amount you want to borrow can't be more than 200% of your home's value."
    }
  }

  $messageField.html(message);

  return message.length === 0;
};

/**
 * Validate purchase reason
 *
 * @param purchaseReason
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.purchaseReason = function (purchaseReason, $messageField) {
    var message = "";

    if (purchaseReason.length < 1) {
        message = "Please choose one.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate leasing
 *
 * @param leasing
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.leasing = function (leasing, $messageField) {
    var message = "";

    if (leasing.length < 1) {
        message = "Please select a response.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate leasing month
 *
 * @param leasingMonth
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.leasingMonth = function (leasingMonth, $messageField) {
    var message = "";

    if (leasingMonth.length < 1) {
        message = "Please select the month your lease expires.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate leasing moyearnth
 *
 * @param leasingYear
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.leasingYear = function (leasingYear, $messageField) {
    var message = "";

    if (leasingYear.length < 1) {
        message = "Please select the year your lease expires.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate real estate agent
 *
 * @param realEstateAgent
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.realEstateAgent = function (realEstateAgent, $messageField) {
    var message = "";

    if (realEstateAgent.length < 1) {
        message = "Please choose one.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate generic radio button
 *
 * @param includeVa
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.radioChecked = function (value, $messageField) {
  var message = '';

  if (typeof value === 'undefined') {
    message = "Please select an option above.";
  }

  $messageField.html(message);

  return message.length === 0;
};

/**
 * Validate generic radio button
 *
 * @param includeVa
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.checkboxChecked = function (value, $messageField) {
  var message = '';
  if (typeof value === 'undefined' || value === false) {
    message = "Please check option above.";
  }

  $messageField.html(message);

  return message.length === 0;
};

/**
 * Validate email.
 * @param email
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.email = function (email, $messageField) {
    var message = '';

    if (email.length === 0) {
        message = "Please enter your email address.";
    }

    if (!ql.regex.EMAIL.test(email)) {
        message = "Your email address must be entered in the following format: example@example.com.";
    }

    $messageField.html(message);

    return message.length === 0;
}

/**
 * Validate state.
 * @param state
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.state = function (state, $messageField) {
    var message = "";

    if (state.length < 1) {
        message = "Please choose your state.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate zip code.
 * @param zip
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.zip = function (zip, $messageField) {
    var message = '';

    if (zip.length === 0) {
        message = ERROR_ZIP_EMPTY;
    }

    if (!ql.regex.ZIPCODE.test(zip)) {
        message = ERROR_ZIP_FORMAT;
    }

    $messageField.html(message);

    return message.length === 0;
}

/**
 * Validate empty field.
 *
 * @param value
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.empty = function (value, $messageField) {
    var message = "",
        field = $messageField.prev().children().first().attr('id');

    if (value.length === 0) {
        if (field === 'annualIncome') {
            message = "Please enter your annual income.";
        } else if (field === 'monthlyDebt') {
            message = "Please enter your monthly debt.";
        } else if (field === 'downPayment') {
            message = "Please enter a down payment amount.";
        } else {
            message = "Please enter a value.";
        }
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate loan balance.
 *
 * @param value
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.loanBalance = function (value, $messageField) {
    var loanBalance = value.replace(/,/g, '');
    var message = "";

    if (value.length === 0) {
        message = "Please enter your current mortgage balance.";
    } else if (loanBalance < 25000 || loanBalance > 3000000) {
        message =  "Loan Balance must be $25,000 - $3,000,000";
    }

    $messageField.html(message);

    return message.length === 0;
};

// Export to node when running in NodeJS environment, for example Jasmine specs
if (typeof module === 'object' && module.hasOwnProperty('exports')) {
    module.exports = Validation;
}

/**
 * Validate credit score.
 *
 * @param creditScore
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.creditRating = function (creditScore, $messageField) {
    var message = "";

    if (creditScore.length < 1) {
        message = "Please select your credit rating.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 * Validate credit score.
 *
 * @param heardAboutUs
 * @param $messageField
 * @returns {boolean}
 */
Validation.prototype.heardAboutUs = function (heardAboutUs, $messageField) {
    var message = "";

    if (heardAboutUs.length < 1) {
        message = "Please select how you heard about us.";
    }

    $messageField.html(message);

    return message.length === 0;
};

/**
 *
 * @param jQuery
 */
function AdvancedCalculator(document, $, $form)
{
  "use strict";

  var getProductsProxy;

  this.$form = $form;
  this.form = $form[0];

  getProductsProxy = $.proxy(AdvancedCalculator.prototype.getProducts, this);

  this.$form.submit(getProductsProxy);
}

/**
 *
 */
AdvancedCalculator.prototype.clear = function () {
  this.value = '';

  return true;
}

/**
 *
 * @returns {boolean}
 */
AdvancedCalculator.prototype.getProducts = function(pEvent)
{
  var calc, offset, finalOffset;
  var $calcButton = $('.js-calcRefiButton');
  var productDisclaimers = '', generalDisclaimers = '';

  pEvent.preventDefault();

  calc = this;
  offset = $calcButton.offset();
  finalOffset = offset.top - $('.c-Masthead').height() - 25;

  // Abort any previous request.
  if (typeof this.lastRequest === 'object') {
    this.lastRequest.abort();
  }

  this.validateRefinance().done(function () {
    calc.lastRequest = $.ajax({
      type: "POST",
      url: '/mini-calc-refinance-results',
      data: calc.$form.serialize(),
      beforeSend: function () {
        // Add .c-Button--secondarySpinner to calc button
        $calcButton.addClass('c-Button--secondarySpinner');
        $calcButton.text('');

        // Create spinner
        var calcSpinner = $('<span class="c-Spinner c-Spinner--small c-Spinner--circle c-Spinner--circle--small"></span>');

        // Append the spinner inside of the button
        $calcButton.append(calcSpinner);

        // Remove no products error message
        $('.js-noProducts').html('');
      },
      success: function (data) {
        var $tabRefi = $("[data-toggle='refinance']");

        // set all the values back to their defaults
        var defaultValues = function () {
          $calcButton.removeClass('c-Button--secondarySpinner');
          $calcButton.text('Calculate');
          $('.js-monthlyPaymentCount').text('0,000.00');
          $('.js-rateApr').text('0.0% / 0.0%');
          $('.js-productType').text('- - -');
          $('.js-disclaimer').addClass('u-Hide');
          $('.js-moreOptionsBtn').text('See Our Full Calculator');
          $('.js-moreOptionsBtn').attr('data-analytics-click', 'hp:miniCalc:refi:fullCalc');
          $('.js-moreOptionsBtn').attr('href', '/calculator-refinance?qlsource=miniCalc');
        }

        // if no data/products comes back, show error message
        if (data === 'null') {
          defaultValues();
          $('.js-refinanceCalculator').append('<div class="b-ErrorText sls-u-mtm js-noProducts" data-qa="noProduct">Our calculator couldn’t find a loan that fits your situation. Contact a Home Loan Expert at (800) 983-1344 to discuss your options.</div>');

          $tabRefi.on("click", function (event) {
            event.preventDefault();
            defaultValues();
          });

          return;
        }

        // parse that data
        data = JSON.parse(data);

        _satellite.track("miniCalcRefinance");

        // Change button text to Recalculate and remove the spinner
        $calcButton.text('Recalculate');
        $calcButton.removeClass('c-Button--secondarySpinner');
        $calcButton.attr('data-analytics-click', 'hp:miniCalc:refi:recalculate');

        // add mini calc refinance class on results container
        $('.js-miniCalcResults').addClass('js-miniCalcRefinance');

        // Add rates data to the UI
        $('.js-rateApr').text(data.rate + '% / ' + data.APR + '%');
        $('.js-productType').text(data.productDescription);

        data.filledDisclaimers.forEach(function(desc) {
          productDisclaimers += desc;
        });

        data.generalDisclaimers.forEach(function(desc) {
          generalDisclaimers += '<span class="legal__copy--title">' + desc.Name + '</span>' + desc.Text;
        });

        $('.js-disclaimerCopy').html(productDisclaimers + generalDisclaimers);
        $('.js-assumptionCopy').html(data.assumptions);

        // Count from 5000 to Montly Payment total
        $('.js-monthlyPaymentCount').countTo({
          from: 5000,
          to: parseFloat(data.totalMonthlyPayment),
          speed: 2000,
          decimals: 2,
          formatter: function (value, options) {
            value = value.toFixed(options.decimals);
            value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return value;
          }
        });

        // if the window is less than or equal to 800
        // then scroll down to results
        if ($(window).width() <= 800) {
          // if less than 800 or equal
          $('html, body').animate({
            scrollTop: finalOffset
          }, 1000);
        }

        // If the user submitted the form and data shows in results,
        // then hit the refinance tab, and hit the purchase tab,
        // the results still should show
        $('#refiMonthlyPayment').val(data.totalMonthlyPayment);
        $('#refiRate').val(data.rate);
        $('#refiApr').val(data.APR);
        $('#refiProduct').val(data.productDescription);

        var $refiMonthlyPayment = $('#refiMonthlyPayment').val();
        var $refiRate = $('#refiRate').val();
        var $refiApr = $('#refiApr').val();
        var $refiProduct = $('#refiProduct').val();
        var $refiDisclaimer = $('.js-disclaimer').html();

        $tabRefi.on("click", function (event) {
          event.preventDefault();
          $('.js-monthlyPaymentCount').html($refiMonthlyPayment.replace(/\B(?=(\d{3})+(?!\d))/g, ','));
          $('.js-rateApr').html($refiRate + '% / ' + $refiApr + '%');
          $('.js-productType').html($refiProduct);
          $('.js-moreOptionsBtn').attr('href', refiMoreOptionsPath);
          $('.js-moreOptionsBtn').text('See More Payment Options');
          $('.js-moreOptionsBtn').attr('data-analytics-click', refiMoreOptionsDataAttr);
          $('.js-disclaimer').html($refiDisclaimer);
          $('.js-disclaimer').removeClass('u-Hide');
        });

        // Fill in more options btn path with the input values
        var $zipCode = $('#zipCode').val(),
            $refinanceGoal = $('#refinanceGoal').val(),
            $creditScore = $('#creditScore').val(),
            $currentLoanBalanceAmount = $('#currentLoanBalanceAmount').val(),
            $homeValue = $('#homeValue').val(),
            $includeVa = $('input:radio[name=includeVaRefi]:checked').val();

        var refiMoreOptionsPath = '/calculator-refinance?qlsource=miniCalc' + '&zipCode=' + $zipCode + '&creditScore=' + $creditScore + '&refinanceGoal=' + $refinanceGoal + '&currentLoanBalanceAmount=' + $currentLoanBalanceAmount + '&homeValue=' + $homeValue + '&includeVa=' + $includeVa;
        var refiMoreOptionsDataAttr = 'hp:miniCalc:refi:moreOptions';
        $('.js-moreOptionsBtn').attr('href', refiMoreOptionsPath);
        $('.js-moreOptionsBtn').text('See More Payment Options');
        $('.js-moreOptionsBtn').attr('data-analytics-click', refiMoreOptionsDataAttr);

        // Legal disclaimers & Modal
        var $disclaimer = $('.js-disclaimer');
        $disclaimer.removeClass('u-Hide');

        $(document).on('click', '.js-miniCalcRefinance .js-disclaimerModal', function (e) {
          e.preventDefault();
          $('body').trigger('futureAdjustmentModalRefinance');

          if (typeof data.armIndex !== 'undefined') {
            $('.js-armContent').removeClass('u-Hide');
          }
        });

        var modalConfig = {
          cancelText: 'Close',
          content: $('.js-miniCalcRefinance .js-futureAdjustmentContent').html(),
          confirmSwitch: false,
          modalTitle: 'Legal Disclaimers'
        };

        $.fn.newModal('futureAdjustmentModalRefinance', $('body'), modalConfig);

        // if ARM comes back, fill in future adjustments with ARM data
        if (typeof data.armIndex !== 'undefined') {
          $('.js-lifetimeRateCap').html(data.lifeAdjustmentCap);
          $('.js-yearlyAdjustmentCap').html(data.yearlyAdjustmentCap);
          $('.js-firstAdjustmentCap').html(data.firstYearRateCap);
          $('.js-armIndex').html(data.armIndex);
          $('.js-armMargin').html(data.armMargin);
        }
      },
      fail: function () {
        $('.js-miniCalcResults').html('No products returned.');
      }
    });
  });

  return false;
};

/**
 *  Validate fields.
 *
 * @returns {boolean}
 */
AdvancedCalculator.prototype.validateRefinance = function() {
  var loanBalance = this.form.querySelector('.js-calculatorLoanBalance input'),
      homeValue = this.form.querySelector('.js-calculatorHomeValue input'),
      includeVa = this.form.querySelector('.js-calculatorVa input'),
      promises = [];

  promises.push(loanBalance.validate());
  promises.push(homeValue.validate());
  promises.push(includeVa.validate());

  return $.when.apply($, promises);
}

var advancedCalculator = new AdvancedCalculator(
  document,
  jQuery,
  jQuery('.js-refinanceCalculator')
);

var calcValidation = new Validation(
  _,
  jQuery('.js-refinanceCalculator'),
  '.js-form-field',
  '.js-validation-container'
);

$('.js-calculatorLoanBalance input').mask("#,##0", {reverse: true});
$('.js-calculatorHomeValue input').mask("#,##0", {reverse: true});

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // CommonJS
        factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {
    var CountTo = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, CountTo.DEFAULTS, this.dataOptions(), options);
        this.init();
    };

    CountTo.DEFAULTS = {
        from: 0,               // the number the element should start at
        to: 0,                 // the number the element should end at
        speed: 1000,           // how long it should take to count between the target numbers
        refreshInterval: 100,  // how often the element should be updated
        decimals: 0,           // the number of decimal places to show
        formatter: formatter,  // handler for formatting the value before rendering
        onUpdate: null,        // callback method for every time the element is updated
        onComplete: null       // callback method for when the element finishes updating
    };

    CountTo.prototype.init = function () {
        this.value = this.options.from;
        this.loops = Math.ceil(this.options.speed / this.options.refreshInterval);
        this.loopCount = 0;
        this.increment = (this.options.to - this.options.from) / this.loops;
    };

    CountTo.prototype.dataOptions = function () {
        var options = {
            from: this.$element.data('from'),
            to: this.$element.data('to'),
            speed: this.$element.data('speed'),
            refreshInterval: this.$element.data('refresh-interval'),
            decimals: this.$element.data('decimals')
        };

        var keys = Object.keys(options);

        for (var i in keys) {
            var key = keys[i];

            if (typeof (options[key]) === 'undefined') {
                delete options[key];
            }
        }

        return options;
    };

    CountTo.prototype.update = function () {
        this.value += this.increment;
        this.loopCount++;

        this.render();

        if (typeof (this.options.onUpdate) == 'function') {
            this.options.onUpdate.call(this.$element, this.value);
        }

        if (this.loopCount >= this.loops) {
            clearInterval(this.interval);
            this.value = this.options.to;

            if (typeof (this.options.onComplete) == 'function') {
                this.options.onComplete.call(this.$element, this.value);
            }
        }
    };

    CountTo.prototype.render = function () {
        var formattedValue = this.options.formatter.call(this.$element, this.value, this.options);
        this.$element.text(formattedValue);
    };

    CountTo.prototype.restart = function () {
        this.stop();
        this.init();
        this.start();
    };

    CountTo.prototype.start = function () {
        this.stop();
        this.render();
        this.interval = setInterval(this.update.bind(this), this.options.refreshInterval);
    };

    CountTo.prototype.stop = function () {
        if (this.interval) {
            clearInterval(this.interval);
        }
    };

    CountTo.prototype.toggle = function () {
        if (this.interval) {
            this.stop();
        } else {
            this.start();
        }
    };

    function formatter(value, options) {
        return value.toFixed(options.decimals);
    }

    $.fn.countTo = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data('countTo');
            var init = !data || typeof (option) === 'object';
            var options = typeof (option) === 'object' ? option : {};
            var method = typeof (option) === 'string' ? option : 'start';

            if (init) {
                if (data) data.stop();
                $this.data('countTo', data = new CountTo(this, options));
            }

            data[method].call(data);
        });
    };
}));

/**
 *
 * @param jQuery
 */
function AdvancedCalculator(document, $, $form)
{
  "use strict";

  var getProductsProxy;

  this.$form = $form;
  this.form = $form[0];

  getProductsProxy = $.proxy(AdvancedCalculator.prototype.getProducts, this);

  this.$form.submit(getProductsProxy);
}

/**
 *
 */
AdvancedCalculator.prototype.clear = function () {
  this.value = '';

  return true;
}

/**
 *
 * @returns {boolean}
 */
AdvancedCalculator.prototype.getProducts = function(pEvent)
{
  var calc, offset, finalOffset;
  var $calcButton = $('.js-calcPurchButton');
  var productDisclaimers = '', generalDisclaimers = '';

  pEvent.preventDefault();

  calc = this;
  offset = $calcButton.offset();
  finalOffset = offset.top - $('.c-Masthead').height() - 25;

  // Abort any previous request.
  if (typeof this.lastRequest === 'object') {
    this.lastRequest.abort();
  }

  this.validate().done(function () {
    calc.lastRequest = $.ajax({
      type: "POST",
      url: '/mini-calc-purchase-results',
      data: calc.$form.serialize(),
      beforeSend: function () {
        // Add .c-Button--secondarySpinner to calc button
        $calcButton.addClass('c-Button--secondarySpinner');
        $calcButton.text('');

        // Create spinner
        var calcSpinner = $('<span class="c-Spinner c-Spinner--small c-Spinner--circle c-Spinner--circle--small"></span>');

        // Append the spinner inside of the button
        $calcButton.append(calcSpinner);

        // Remove no products error message
        $('.js-no-products').html('');
      },
      success: function (data) {
        var $tabPurch = $("[data-toggle='purchase']");
        // set all the values back to their defaults
        var defaultValues = function () {
          $calcButton.removeClass('c-Button--secondarySpinner');
          $calcButton.text('Calculate');
          $('.js-monthlyPaymentCount').text('0,000.00');
          $('.js-rateApr').text('0.0% / 0.0%');
          $('.js-productType').text('- - -');
          $('.js-disclaimer').addClass('u-Hide');
          $('.js-moreOptionsBtn').text('See Our Full Calculator');
          $('.js-moreOptionsBtn').attr('data-analytics-click', 'hp:miniCalc:purch:fullCalc');
          $('.js-moreOptionsBtn').attr('href', '/calculator-mortgage?qlsource=miniCalc');
        }

        // if no data/products comes back, show error message
        if (data === 'null') {
          defaultValues();
          $('.js-purchaseCalculator').append('<div class="b-ErrorText sls-u-mtm js-no-products" data-qa="noProduct">Our calculator couldn’t find a loan that fits your situation. Contact a Home Loan Expert at (800) 983-1344 to discuss your options.</div>');

          $tabPurch.on("click", function (event) {
            event.preventDefault();
            defaultValues();
          });
          return;
        }

        _satellite.track("miniCalcPurchase");

        // parse that data
        data = JSON.parse(data);

        // Change button text to Recalculate and remove the spinner
        $calcButton.text('Recalculate');
        $calcButton.removeClass('c-Button--secondarySpinner');
        $calcButton.attr('data-analytics-click', 'hp:miniCalc:purch:recalculate');

        // add mini calc purchase class on results container
        $('.js-miniCalcResults').addClass('js-miniCalcPurchase');

        // Add data to the UI
        $('.js-rateApr').text(data.rate + '% / ' + data.APR + '%');
        $('.js-productType').text(data.productDescription);

        data.filledDisclaimers.forEach(function(desc) {
          productDisclaimers += desc;
        });

        data.generalDisclaimers.forEach(function(desc) {
          generalDisclaimers += '<span class="legal__copy--title">' + desc.Name + '</span>' + desc.Text;
        });

        $('.js-disclaimerCopy').html(productDisclaimers + generalDisclaimers);
        $('.js-assumptionCopy').html(data.assumptions);

        // Count from 5000 to Montly Payment total
        $('.js-monthlyPaymentCount').countTo({
          from: 5000,
          to: parseFloat(data.totalMonthlyPayment),
          speed: 2000,
          decimals: 2,
          formatter: function (value, options) {
            value = value.toFixed(options.decimals);
            value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return value;
          }
        });

        // if the window is less than or equal to 800
        // then scroll down to results
        if ($(window).width() <= 800) {
          // if less than 800 or equal
          $('html, body').animate({
            scrollTop: finalOffset
          }, 1000);
        }

        // If the user submitted the form and data shows in results,
        // then hit the refinance tab, and hit the purchase tab,
        // the results still should show
        $('#purchMonthlyPayment').val(data.totalMonthlyPayment);
        $('#purchRate').val(data.rate);
        $('#purchApr').val(data.APR);
        $('#purchProduct').val(data.productDescription);
        $('#purchPaymentOptions').val(purchMoreOptionsPath);

        // Get the value of the hidden inputs
        var $purchMonthlyPayment = $('#purchMonthlyPayment').val();
        var $purchRate = $('#purchRate').val();
        var $purchApr = $('#purchApr').val();
        var $purchProduct = $('#purchProduct').val();
        var $purchPaymentOptions = $('#purchPaymentOptions').val();
        var $purchDisclaimer = $('.js-disclaimer').html();

        // if you select the purchase tab, fill in the data
        $tabPurch.on("click", function (event) {
          event.preventDefault();
          $('.js-monthlyPaymentCount').html($purchMonthlyPayment.replace(/\B(?=(\d{3})+(?!\d))/g, ','));
          $('.js-rateApr').html($purchRate + '% / ' + $purchApr + '%');
          $('.js-productType').html($purchProduct);
          $('.js-moreOptionsBtn').attr('href', purchMoreOptionsPath);
          $('.js-moreOptionsBtn').text('See More Payment Options');
          $('.js-moreOptionsBtn').attr('data-analytics-click', purchMoreOptionsDataAttr);
          $('.js-disclaimer').html($purchDisclaimer);
          $('.js-disclaimer').removeClass('u-Hide');
        });

        // Fill in more options btn path with the input values
        var $zipCode = $('#zipCode').val(),
            $creditScore = $('#creditScore').val(),
            $purchasePrice = $('#purchasePrice').val(),
            $downPayment = $('#downPayment').val(),
            $includeVa = $('input:radio[name=includeVaPurch]:checked').val();

        var purchMoreOptionsPath = '/calculator-mortgage?qlsource=miniCalc' + '&zipCode=' + $zipCode + '&creditScore=' + $creditScore + '&purchasePrice=' + $purchasePrice + '&downPayment=' + $downPayment + '&includeVa=' + $includeVa;
        var purchMoreOptionsDataAttr = 'hp:miniCalc:purch:moreOptions';
        $('.js-moreOptionsBtn').attr('href', purchMoreOptionsPath);
        $('.js-moreOptionsBtn').text('See More Payment Options');
        $('.js-moreOptionsBtn').attr('data-analytics-click', purchMoreOptionsDataAttr);

        // Legal disclaimers & Modal
        var $disclaimer = $('.js-disclaimer');
        $disclaimer.removeClass('u-Hide');
        $disclaimer.addClass('js-disclaimerPurchase');

        $(document).on('click', '.js-miniCalcPurchase .js-disclaimerModal', function (e) {
          e.preventDefault();
          $('body').trigger('futureAdjustmentModalPurchase');

          if (typeof data.armIndex !== 'undefined') {
            $('.js-armContent').removeClass('u-Hide');
          }
        });

        var modalConfig = {
          cancelText: 'Close',
          content: $('.js-miniCalcPurchase .js-futureAdjustmentContent').html(),
          confirmSwitch: false,
          modalTitle: 'Legal Disclaimers'
        };

        $.fn.newModal('futureAdjustmentModalPurchase', $('body'), modalConfig);

        // if ARM comes back, fill in future adjustments with ARM data
        if (typeof data.armIndex !== 'undefined') {
          $('.js-lifetimeRateCap').html(data.lifeAdjustmentCap);
          $('.js-yearlyAdjustmentCap').html(data.yearlyAdjustmentCap);
          $('.js-firstAdjustmentCap').html(data.firstYearRateCap);
          $('.js-armIndex').html(data.armIndex);
          $('.js-armMargin').html(data.armMargin);
        }
      },
        fail: function () {
          $('.js-miniCalcResults').html('No products returned.');
        }
    });
  });

    return false;
};

/**
 *  Validate fields.
 *
 * @returns {boolean}
 */
AdvancedCalculator.prototype.validate = function() {
  var purchasePrice = this.form.querySelector('.js-calculatorPurchasePrice input'),
      downPayment = this.form.querySelector('.js-calculatorDownPayment input'),
      includeVa = this.form.querySelector('.js-calculatorVa input'),
      promises = [];

  promises.push(purchasePrice.validate());
  promises.push(downPayment.validate());
  promises.push(includeVa.validate());

  return $.when.apply($, promises);
}

// need to revalidate down payment if VA is checked
$(document).on('click', '.js-purchaseCalculator .js-calculatorVa input', function() {
  this.form.querySelector('.js-purchaseCalculator .js-calculatorDownPayment input').validate();
});

var advancedCalculator = new AdvancedCalculator(
  document,
  jQuery,
  jQuery('.js-purchaseCalculator')
);

var calcValidation = new Validation(
  _,
  jQuery('.js-purchaseCalculator'),
  '.js-form-field',
  '.js-validation-container'
);

//Input masking
$('.js-calculatorPurchasePrice input').mask("#,##0", {reverse: true});
$('.js-calculatorDownPayment input').mask("#,##0", {reverse: true});

/*! Lity - v2.3.1 - 2018-04-20
* http://sorgalla.com/lity/
* Copyright (c) 2015-2018 Jan Sorgalla; Licensed MIT */
(function(window, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], function($) {
            return factory(window, $);
        });
    } else if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = factory(window, require('jquery'));
    } else {
        window.lity = factory(window, window.jQuery || window.Zepto);
    }
}(typeof window !== "undefined" ? window : this, function(window, $) {
    'use strict';

    var document = window.document;

    var _win = $(window);
    var _deferred = $.Deferred;
    var _html = $('html');
    var _instances = [];

    var _attrAriaHidden = 'aria-hidden';
    var _dataAriaHidden = 'lity-' + _attrAriaHidden;

    var _focusableElementsSelector = 'a[href],area[href],input:not([disabled]),select:not([disabled]),textarea:not([disabled]),button:not([disabled]),iframe,object,embed,[contenteditable],[tabindex]:not([tabindex^="-"])';

    var _defaultOptions = {
        esc: true,
        handler: null,
        handlers: {
            image: imageHandler,
            inline: inlineHandler,
            youtube: youtubeHandler,
            vimeo: vimeoHandler,
            googlemaps: googlemapsHandler,
            facebookvideo: facebookvideoHandler,
            iframe: iframeHandler
        },
        template: '<div class="lity" role="dialog" aria-label="Dialog Window (Press escape to close)" tabindex="-1"><div class="lity-wrap" data-lity-close role="document"><div class="lity-loader" aria-hidden="true">Loading...</div><div class="lity-container"><div class="lity-content"></div><button class="lity-close" type="button" aria-label="Close (Press escape to close)" data-lity-close>&times;</button></div></div></div>'
    };

    var _imageRegexp = /(^data:image\/)|(\.(png|jpe?g|gif|svg|webp|bmp|ico|tiff?)(\?\S*)?$)/i;
    var _youtubeRegex = /(youtube(-nocookie)?\.com|youtu\.be)\/(watch\?v=|v\/|u\/|embed\/?)?([\w-]{11})(.*)?/i;
    var _vimeoRegex =  /(vimeo(pro)?.com)\/(?:[^\d]+)?(\d+)\??(.*)?$/;
    var _googlemapsRegex = /((maps|www)\.)?google\.([^\/\?]+)\/?((maps\/?)?\?)(.*)/i;
    var _facebookvideoRegex = /(facebook\.com)\/([a-z0-9_-]*)\/videos\/([0-9]*)(.*)?$/i;

    var _transitionEndEvent = (function() {
        var el = document.createElement('div');

        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        };

        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return transEndEventNames[name];
            }
        }

        return false;
    })();

    function transitionEnd(element) {
        var deferred = _deferred();

        if (!_transitionEndEvent || !element.length) {
            deferred.resolve();
        } else {
            element.one(_transitionEndEvent, deferred.resolve);
            setTimeout(deferred.resolve, 500);
        }

        return deferred.promise();
    }

    function settings(currSettings, key, value) {
        if (arguments.length === 1) {
            return $.extend({}, currSettings);
        }

        if (typeof key === 'string') {
            if (typeof value === 'undefined') {
                return typeof currSettings[key] === 'undefined'
                    ? null
                    : currSettings[key];
            }

            currSettings[key] = value;
        } else {
            $.extend(currSettings, key);
        }

        return this;
    }

    function parseQueryParams(params) {
        var pairs = decodeURI(params.split('#')[0]).split('&');
        var obj = {}, p;

        for (var i = 0, n = pairs.length; i < n; i++) {
            if (!pairs[i]) {
                continue;
            }

            p = pairs[i].split('=');
            obj[p[0]] = p[1];
        }

        return obj;
    }

    function appendQueryParams(url, params) {
        return url + (url.indexOf('?') > -1 ? '&' : '?') + $.param(params);
    }

    function transferHash(originalUrl, newUrl) {
        var pos = originalUrl.indexOf('#');

        if (-1 === pos) {
            return newUrl;
        }

        if (pos > 0) {
            originalUrl = originalUrl.substr(pos);
        }

        return newUrl + originalUrl;
    }

    function error(msg) {
        return $('<span class="lity-error"/>').append(msg);
    }

    function imageHandler(target, instance) {
        var desc = (instance.opener() && instance.opener().data('lity-desc')) || 'Image with no description';
        var img = $('<img src="' + target + '" alt="' + desc + '"/>');
        var deferred = _deferred();
        var failed = function() {
            deferred.reject(error('Failed loading image'));
        };

        img
            .on('load', function() {
                if (this.naturalWidth === 0) {
                    return failed();
                }

                deferred.resolve(img);
            })
            .on('error', failed)
        ;

        return deferred.promise();
    }

    imageHandler.test = function(target) {
        return _imageRegexp.test(target);
    };

    function inlineHandler(target, instance) {
        var el, placeholder, hasHideClass;

        try {
            el = $(target);
        } catch (e) {
            return false;
        }

        if (!el.length) {
            return false;
        }

        placeholder = $('<i style="display:none !important"/>');
        hasHideClass = el.hasClass('lity-hide');

        instance
            .element()
            .one('lity:remove', function() {
                placeholder
                    .before(el)
                    .remove()
                ;

                if (hasHideClass && !el.closest('.lity-content').length) {
                    el.addClass('lity-hide');
                }
            })
        ;

        return el
            .removeClass('lity-hide')
            .after(placeholder)
        ;
    }

    function youtubeHandler(target) {
        var matches = _youtubeRegex.exec(target);

        if (!matches) {
            return false;
        }

        return iframeHandler(
            transferHash(
                target,
                appendQueryParams(
                    'https://www.youtube' + (matches[2] || '') + '.com/embed/' + matches[4],
                    $.extend(
                        {
                            autoplay: 1
                        },
                        parseQueryParams(matches[5] || '')
                    )
                )
            )
        );
    }

    function vimeoHandler(target) {
        var matches = _vimeoRegex.exec(target);

        if (!matches) {
            return false;
        }

        return iframeHandler(
            transferHash(
                target,
                appendQueryParams(
                    'https://player.vimeo.com/video/' + matches[3],
                    $.extend(
                        {
                            autoplay: 1
                        },
                        parseQueryParams(matches[4] || '')
                    )
                )
            )
        );
    }

    function facebookvideoHandler(target) {
        var matches = _facebookvideoRegex.exec(target);

        if (!matches) {
            return false;
        }

        if (0 !== target.indexOf('http')) {
            target = 'https:' + target;
        }

        return iframeHandler(
            transferHash(
                target,
                appendQueryParams(
                    'https://www.facebook.com/plugins/video.php?href=' + target,
                    $.extend(
                        {
                            autoplay: 1
                        },
                        parseQueryParams(matches[4] || '')
                    )
                )
            )
        );
    }

    function googlemapsHandler(target) {
        var matches = _googlemapsRegex.exec(target);

        if (!matches) {
            return false;
        }

        return iframeHandler(
            transferHash(
                target,
                appendQueryParams(
                    'https://www.google.' + matches[3] + '/maps?' + matches[6],
                    {
                        output: matches[6].indexOf('layer=c') > 0 ? 'svembed' : 'embed'
                    }
                )
            )
        );
    }

    function iframeHandler(target) {
        return '<div class="lity-iframe-container"><iframe frameborder="0" allowfullscreen src="' + target + '"/></div>';
    }

    function winHeight() {
        return document.documentElement.clientHeight
            ? document.documentElement.clientHeight
            : Math.round(_win.height());
    }

    function keydown(e) {
        var current = currentInstance();

        if (!current) {
            return;
        }

        // ESC key
        if (e.keyCode === 27 && !!current.options('esc')) {
            current.close();
        }

        // TAB key
        if (e.keyCode === 9) {
            handleTabKey(e, current);
        }
    }

    function handleTabKey(e, instance) {
        var focusableElements = instance.element().find(_focusableElementsSelector);
        var focusedIndex = focusableElements.index(document.activeElement);

        if (e.shiftKey && focusedIndex <= 0) {
            focusableElements.get(focusableElements.length - 1).focus();
            e.preventDefault();
        } else if (!e.shiftKey && focusedIndex === focusableElements.length - 1) {
            focusableElements.get(0).focus();
            e.preventDefault();
        }
    }

    function resize() {
        $.each(_instances, function(i, instance) {
            instance.resize();
        });
    }

    function registerInstance(instanceToRegister) {
        if (1 === _instances.unshift(instanceToRegister)) {
            _html.addClass('lity-active');

            _win
                .on({
                    resize: resize,
                    keydown: keydown
                })
            ;
        }

        $('body > *').not(instanceToRegister.element())
            .addClass('lity-hidden')
            .each(function() {
                var el = $(this);

                if (undefined !== el.data(_dataAriaHidden)) {
                    return;
                }

                el.data(_dataAriaHidden, el.attr(_attrAriaHidden) || null);
            })
            .attr(_attrAriaHidden, 'true')
        ;
    }

    function removeInstance(instanceToRemove) {
        var show;

        instanceToRemove
            .element()
            .attr(_attrAriaHidden, 'true')
        ;

        if (1 === _instances.length) {
            _html.removeClass('lity-active');

            _win
                .off({
                    resize: resize,
                    keydown: keydown
                })
            ;
        }

        _instances = $.grep(_instances, function(instance) {
            return instanceToRemove !== instance;
        });

        if (!!_instances.length) {
            show = _instances[0].element();
        } else {
            show = $('.lity-hidden');
        }

        show
            .removeClass('lity-hidden')
            .each(function() {
                var el = $(this), oldAttr = el.data(_dataAriaHidden);

                if (!oldAttr) {
                    el.removeAttr(_attrAriaHidden);
                } else {
                    el.attr(_attrAriaHidden, oldAttr);
                }

                el.removeData(_dataAriaHidden);
            })
        ;
    }

    function currentInstance() {
        if (0 === _instances.length) {
            return null;
        }

        return _instances[0];
    }

    function factory(target, instance, handlers, preferredHandler) {
        var handler = 'inline', content;

        var currentHandlers = $.extend({}, handlers);

        if (preferredHandler && currentHandlers[preferredHandler]) {
            content = currentHandlers[preferredHandler](target, instance);
            handler = preferredHandler;
        } else {
            // Run inline and iframe handlers after all other handlers
            $.each(['inline', 'iframe'], function(i, name) {
                delete currentHandlers[name];

                currentHandlers[name] = handlers[name];
            });

            $.each(currentHandlers, function(name, currentHandler) {
                // Handler might be "removed" by setting callback to null
                if (!currentHandler) {
                    return true;
                }

                if (
                    currentHandler.test &&
                    !currentHandler.test(target, instance)
                ) {
                    return true;
                }

                content = currentHandler(target, instance);

                if (false !== content) {
                    handler = name;
                    return false;
                }
            });
        }

        return {handler: handler, content: content || ''};
    }

    function Lity(target, options, opener, activeElement) {
        var self = this;
        var result;
        var isReady = false;
        var isClosed = false;
        var element;
        var content;

        options = $.extend(
            {},
            _defaultOptions,
            options
        );

        element = $(options.template);

        // -- API --

        self.element = function() {
            return element;
        };

        self.opener = function() {
            return opener;
        };

        self.options  = $.proxy(settings, self, options);
        self.handlers = $.proxy(settings, self, options.handlers);

        self.resize = function() {
            if (!isReady || isClosed) {
                return;
            }

            content
                .css('max-height', winHeight() + 'px')
                .trigger('lity:resize', [self])
            ;
        };

        self.close = function() {
            if (!isReady || isClosed) {
                return;
            }

            isClosed = true;

            removeInstance(self);

            var deferred = _deferred();

            // We return focus only if the current focus is inside this instance
            if (
                activeElement &&
                (
                    document.activeElement === element[0] ||
                    $.contains(element[0], document.activeElement)
                )
            ) {
                try {
                    activeElement.focus();
                } catch (e) {
                    // Ignore exceptions, eg. for SVG elements which can't be
                    // focused in IE11
                }
            }

            content.trigger('lity:close', [self]);

            element
                .removeClass('lity-opened')
                .addClass('lity-closed')
            ;

            transitionEnd(content.add(element))
                .always(function() {
                    content.trigger('lity:remove', [self]);
                    element.remove();
                    element = undefined;
                    deferred.resolve();
                })
            ;

            return deferred.promise();
        };

        // -- Initialization --

        result = factory(target, self, options.handlers, options.handler);

        element
            .attr(_attrAriaHidden, 'false')
            .addClass('lity-loading lity-opened lity-' + result.handler)
            .appendTo('body')
            .focus()
            .on('click', '[data-lity-close]', function(e) {
                if ($(e.target).is('[data-lity-close]')) {
                    self.close();
                }
            })
            .trigger('lity:open', [self])
        ;

        registerInstance(self);

        $.when(result.content)
            .always(ready)
        ;

        function ready(result) {
            content = $(result)
                .css('max-height', winHeight() + 'px')
            ;

            element
                .find('.lity-loader')
                .each(function() {
                    var loader = $(this);

                    transitionEnd(loader)
                        .always(function() {
                            loader.remove();
                        })
                    ;
                })
            ;

            element
                .removeClass('lity-loading')
                .find('.lity-content')
                .empty()
                .append(content)
            ;

            isReady = true;

            content
                .trigger('lity:ready', [self])
            ;
        }
    }

    function lity(target, options, opener) {
        if (!target.preventDefault) {
            opener = $(opener);
        } else {
            target.preventDefault();
            opener = $(this);
            target = opener.data('lity-target') || opener.attr('href') || opener.attr('src');
        }

        var instance = new Lity(
            target,
            $.extend(
                {},
                opener.data('lity-options') || opener.data('lity'),
                options
            ),
            opener,
            document.activeElement
        );

        if (!target.preventDefault) {
            return instance;
        }
    }

    lity.version  = '2.3.1';
    lity.options  = $.proxy(settings, lity, _defaultOptions);
    lity.handlers = $.proxy(settings, lity, _defaultOptions.handlers);
    lity.current  = currentInstance;

    $(document).on('click.lity', '[data-lity]', lity);

    return lity;
}));

var flashSaleModal = document.querySelector('[data-modal="flashSale"]');
var flashSaleMask = document.querySelector('[data-modal-mask="flashSale"]');
var flashSaleCancel = document.querySelector('[data-modal-cancel="flashSale"]');

(function() {
  // Click anywhere in the modal, close it and remove mask.
  flashSaleCancel.addEventListener('click', function() {
    flashSaleModal.classList.add('u-Hide');
    flashSaleMask.classList.add('u-Hide');
  })

  // Click on mask, hide modal and mask.
  flashSaleMask.addEventListener('click', function() {
    flashSaleModal.classList.add('u-Hide');
    flashSaleMask.classList.add('u-Hide');
  })
})();

var $tabPurch = $("[data-toggle='purchase']");
var $tabRefi = $("[data-toggle='refinance']");
var $miniCalcRefi = $('.js-miniCalcRefi');
var $miniCalcPurch = $('.js-miniCalcPurch');
var $moreOptionsBtn = $('.js-moreOptionsBtn');
var $miniCalcResults = $('.c-MiniCalc__results');
var $miniCalcDisclaimersPurch = '';
var $miniCalcDisclaimersRefi = '';

// set all the values back to their defaults
var defaultValues = function () {
  $('.js-monthlyPaymentCount').text('0,000.00');
  $('.js-rateApr').text('0.0% / 0.0%');
  $('.js-productType').text('- - -');
  $('.js-disclaimer').addClass('u-Hide');
  $moreOptionsBtn.text('See Our Full Calculator');
}

$tabPurch.on("click", function (event) {
  event.preventDefault();
  // Remove active class from Refi tab
  $tabRefi.removeClass('c-Tab--active');
  // Add active class to Purch tab
  $tabPurch.addClass('c-Tab--active');
  // Add hide class to Refi form area
  $miniCalcRefi.addClass('u-Hide');
  // Remove hide class from Purch form area
  $miniCalcPurch.removeClass('u-Hide');
  // Change the more options button to reflect
  // mortgage calculator
  $moreOptionsBtn.attr('href', '/calculator-mortgage?qlsource=miniCalc');

  // If the purchase monthly payment field has
  // a value of 0, set the results to it's default state
  if ($('#purchMonthlyPayment').val() == 0) {
    defaultValues();
    $moreOptionsBtn.attr('data-analytics-click', 'hp:miniCalc:purch:fullCalc');
  }

  $('.js-miniCalcResults').addClass('js-miniCalcPurchase');
  $('.js-miniCalcResults').removeClass('js-miniCalcRefinance');

  // Save refi disclaimer because purchase was clicked
  $miniCalcDisclaimersRefi = $('.js-disclaimer').html();

// Only do things here if we have a purchase disclaimer
  if ($miniCalcDisclaimersPurch) {
    $('.js-disclaimer').html($miniCalcDisclaimersPurch);
  }
});

$tabRefi.on("click", function(event) {
  event.preventDefault();
  // Remove active class from Purch tab
  $tabPurch.removeClass('c-Tab--active');
  // Add active class to Refi tab
  $tabRefi.addClass('c-Tab--active');
  // Add hide class to Purch form area
  $miniCalcPurch.addClass('u-Hide');
  // Remove hide class from Refi form area
  $miniCalcRefi.removeClass('u-Hide');
  // Change the more options button to reflect
  // mortgage refinance
  $moreOptionsBtn.attr('href', '/calculator-refinance?qlsource=miniCalc');

  // If the refinance monthly payment field has
  // a value of 0, set the results to it's default state
  if ($('#refiMonthlyPayment').val() == 0) {
    defaultValues();
    $moreOptionsBtn.attr('data-analytics-click', 'hp:miniCalc:refi:fullCalc');
  }

  $('.js-miniCalcResults').addClass('js-miniCalcRefinance');
  $('.js-miniCalcResults').removeClass('js-miniCalcPurchase');

  // Save purch disclaimer because refi was clicked
  $miniCalcDisclaimersPurch = $('.js-disclaimer').html();

  // Only do things here if we have a refi disclaimer
  if ($miniCalcDisclaimersRefi) {
    $('.js-disclaimer').html($miniCalcDisclaimersRefi);
  }
});

var $ratesCardHeader = $('.c-Card__header');
var $ratesCardContent = $('.c-Card__copy');
var $ratesCardCircleIcon = $('.c-Card__icon--circle');

$ratesCardCircleIcon.on('click', function () {
  $(this).next($ratesCardContent).slideToggle();
  $(this).toggleClass('c-Card__icon--circle--active');
  $(this).prev($ratesCardHeader).toggleClass('c-Card__header--active');
});

if ($(window).width() < 750) {
  $ratesCardHeader.on('click', function (e) {
    e.preventDefault();
    $(this).nextUntil($ratesCardContent).last().next().slideToggle();
    $(this).next($ratesCardCircleIcon).toggleClass('c-Card__icon--circle--active');
    $(this).toggleClass('c-Card__header--active');
  });
}
